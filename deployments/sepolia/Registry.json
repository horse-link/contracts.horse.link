{
  "address": "0x0b0621a6fA780A12E272727cC1aca57b842596C5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "MarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "MarketRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "removeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "removeVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd960c2eb7fd8fadd2bbadf67ece217ac06afc2c521f1222184c47894c1ef6593",
  "receipt": {
    "to": null,
    "from": "0x59240752f3Cb66Fb46AB5fdd1a9B0f5bfA17576d",
    "contractAddress": "0x0b0621a6fA780A12E272727cC1aca57b842596C5",
    "transactionIndex": 5,
    "gasUsed": "761693",
    "logsBloom": "0x
    "blockHash": "0xf2384b2e64ce7a3f393e6cb755b9d601637253364eba7aca4d0a0bce4a14f06b",
    "transactionHash": "0xd960c2eb7fd8fadd2bbadf67ece217ac06afc2c521f1222184c47894c1ef6593",
    "logs": [],
    "blockNumber": 4985045,
    "cumulativeGasUsed": "3948315",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB84C7f03cad664dA6762A4a6b0E8bDc829Cb8622"
  ],
  "numDeployments": 1,
  "solcInputHash": "1491c58271b6254aed8f693018d1ccfa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"removeVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xd82776ed6975a5939668e068f995acb1394c2f60a12a9ef3f14cacb91b5a8fd4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"./SignatureLib.sol\\\";\\n\\ninterface IMarket {\\n\\tstruct Back {\\n\\t\\tbytes16 nonce;\\n\\t\\tbytes16 propositionId;\\n\\t\\tbytes16 marketId;\\n\\t\\tuint256 wager;\\n\\t\\tuint256 odds;\\n\\t\\tuint256 close;\\n\\t\\tuint256 end;\\n\\t\\tSignatureLib.Signature signature;\\n\\t}\\n\\n\\tfunction getCount() external view returns (uint64);\\n\\tfunction getInPlayCount() external view returns (uint256);\\n\\tfunction getMargin() external view returns (uint8);\\n\\tfunction getOwner() external view returns (address);\\n\\tfunction getTotalInPlay() external view returns (uint256);\\n\\tfunction getTotalExposure() external view returns (uint256);\\n\\n\\tfunction getBetByIndex(uint64 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool,\\n\\t\\t\\tbytes16,\\n\\t\\t\\tbytes16\\n\\t\\t);\\n\\n\\tfunction getOdds(\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId\\n\\t) external view returns (uint256);\\n\\n\\tfunction getOracleAddress() external view returns (address);\\n\\n\\tfunction getPotentialPayout(\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) external view returns (uint256);\\n\\n\\tfunction getVaultAddress() external view returns (address);\\n\\n\\tfunction back(\\n\\t\\tBack calldata backData\\n\\t) external returns (uint256);\\n\\n\\tfunction settle(uint64 index) external;\\n\\tfunction settleMarket(bytes16 marketId) external;\\n\\t// function scratchAndRefund(uint64 index, bytes16 marketId, bytes16 propositionId, uint256 odds, SignatureLib.Signature calldata signature) external;\\n\\tfunction refund(uint64 index) external;\\n}\\n\",\"keccak256\":\"0xef19ed5496192788a35a5e3351f6497c5ddcc2540ecb8dcbab85ea745f702e1f\",\"license\":\"MIT\"},\"contracts/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\ninterface IOwnable {\\n    function getOwner() external view returns (address);\\n}\",\"keccak256\":\"0x10fd5d723a3e044b8252d6c647e917b2739846df2141898786e27ce0822ffa41\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"./IMarket.sol\\\";\\nimport \\\"./IOwnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ncontract Registry is IOwnable {\\n\\taddress[] public markets;\\n\\taddress[] public vaults;\\n\\n\\tmapping(address => address) private _vaultByAsset;\\n\\tmapping(address => address) private _markets;\\n\\n\\taddress private immutable _owner;\\n\\tIERC20Metadata private immutable _token;\\n\\tuint256 private _threshold;\\n\\n\\tfunction getOwner() external view returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\tfunction marketCount() external view returns (uint256) {\\n\\t\\treturn markets.length;\\n\\t}\\n\\n\\tfunction vaultCount() external view returns (uint256) {\\n\\t\\treturn vaults.length;\\n\\t}\\n\\n\\tconstructor(IERC20Metadata token) {\\n\\t\\t_owner = msg.sender;\\n\\t\\t_token = token;\\n\\t}\\n\\n\\tfunction addVault(address vault) external onlyTokenHolders {\\n\\t\\tassert(vault != address(0));\\n\\t\\taddress assetAddress = IERC4626(vault).asset();\\n\\t\\trequire(\\n\\t\\t\\t_vaultByAsset[assetAddress] == address(0),\\n\\t\\t\\t\\\"addVault: Vault with this asset token already added\\\"\\n\\t\\t);\\n\\n\\t\\tvaults.push(vault);\\n\\t\\t_vaultByAsset[assetAddress] = vault;\\n\\n\\t\\temit VaultAdded(vault);\\n\\t}\\n\\n\\tfunction removeVault(\\n\\t\\tuint256 index,\\n\\t\\taddress vault\\n\\t) external onlyVaultOwner(vault) {\\n\\t\\tif (index >= vaults.length) return;\\n\\n\\t\\tfor (uint256 i = index; i < vaults.length - 1; i++) {\\n\\t\\t\\tvaults[i] = vaults[i + 1];\\n\\t\\t}\\n\\n\\t\\tvaults.pop();\\n\\n\\t\\tdelete _vaultByAsset[vault];\\n\\t\\temit VaultRemoved(vault);\\n\\t}\\n\\n\\tfunction addMarket(address market) external onlyTokenHolders {\\n\\t\\trequire(\\n\\t\\t\\t_markets[market] == address(0),\\n\\t\\t\\t\\\"addMarket: Market already added\\\"\\n\\t\\t);\\n\\t\\t_markets[market] = market;\\n\\t\\tmarkets.push(market);\\n\\t\\temit MarketAdded(market);\\n\\t}\\n\\n\\tfunction removeMarket(uint256 index) external {\\n\\t\\tif (index >= markets.length) return;\\n\\n\\t\\t// Rebalance the array\\n\\t\\taddress market = markets[index];\\n\\t\\trequire(\\n\\t\\t\\tIOwnable(market).getOwner() == msg.sender,\\n\\t\\t\\t\\\"removeMarket: Caller is not the market owner\\\"\\n\\t\\t);\\n\\n\\t\\tfor (uint256 i = index; i < markets.length - 1; i++) {\\n\\t\\t\\tmarkets[i] = markets[i + 1];\\n\\t\\t}\\n\\n\\t\\tmarkets.pop();\\n\\n\\t\\tdelete _markets[market];\\n\\t\\temit MarketRemoved(market);\\n\\t}\\n\\n\\tfunction setThreshold(uint256 threshold) external onlyOwner {\\n\\t\\trequire(threshold != _threshold, \\\"setThreshold: Threshold already set\\\");\\n\\t\\t_threshold = threshold;\\n\\t\\temit ThresholdUpdated(threshold);\\n\\t}\\n\\n\\tmodifier onlyVaultOwner(address vault) {\\n\\t\\trequire(\\n\\t\\t\\tIOwnable(vault).getOwner() == msg.sender,\\n\\t\\t\\t\\\"onlyVaultOwner: Caller is not the vault owner\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyTokenHolders() {\\n\\t\\trequire(\\n\\t\\t\\t_token.balanceOf(msg.sender) >= _threshold,\\n\\t\\t\\t\\\"onlyTokenHolders: Caller does not hold enough tokens\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(\\n\\t\\t\\tmsg.sender == _owner,\\n\\t\\t\\t\\\"onlyOwner: Caller is not the contract owner\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tevent MarketAdded(address indexed market);\\n\\tevent MarketRemoved(address indexed market);\\n\\tevent ThresholdUpdated(uint256 threshold);\\n\\tevent VaultAdded(address indexed vault);\\n\\tevent VaultRemoved(address indexed vault);\\n}\\n\",\"keccak256\":\"0x94ceb1cce46718a1cedcf7c41f8eb69dc16280434f8c54f6d679f9a8eb797c78\",\"license\":\"MIT\"},\"contracts/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nlibrary SignatureLib {\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        bytes32 prefixedHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\n        );\\n        return ecrecover(prefixedHash, signature.v, signature.r, signature.s);\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aea16b52e98b22e10addc4401c67151de809a94688cc5fa7c0e5529b65ccb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610d70380380610d7083398101604081905261002f91610044565b336080526001600160a01b031660a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a051610cca6100a6600039600081816103cd015261083601526000818160e001526109bc0152610cca6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806393e306331161006657806393e3063314610130578063960bfe0414610143578063a7c6a10014610156578063b1283e7714610168578063ec9790821461017b57600080fd5b8063054660e6146100a3578063256b5a02146100b85780632dad2999146100cb578063893d20e8146100de5780638c64ea4a1461011d575b600080fd5b6100b66100b1366004610ae5565b610183565b005b6100b66100c6366004610b16565b6103a9565b6100b66100d9366004610b3a565b6105e6565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b61010061012b366004610ae5565b6107e8565b6100b661013e366004610b16565b610812565b6100b6610151366004610ae5565b6109b1565b6001545b604051908152602001610114565b610100610176366004610ae5565b610ad5565b60005461015a565b600054811061018f5750565b60008082815481106101a3576101a3610b6a565b6000918252602091829020015460408051631127a41d60e31b815290516001600160a01b0390921693503392849263893d20e89260048082019392918290030181865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c9190610b80565b6001600160a01b03161461028c5760405162461bcd60e51b815260206004820152602c60248201527f72656d6f76654d61726b65743a2043616c6c6572206973206e6f74207468652060448201526b36b0b935b2ba1037bbb732b960a11b60648201526084015b60405180910390fd5b815b60005461029d90600190610bb3565b8110156103265760006102b1826001610bca565b815481106102c1576102c1610b6a565b600091825260208220015481546001600160a01b039091169190839081106102eb576102eb610b6a565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061031e81610be2565b91505061028e565b50600080548061033857610338610bfb565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b03841680825260039093526040808220805490931690925590517f59d7b1e52008dc342c9421dadfc773114b914a65682a4e4b53cf60a970df0d779190a25050565b600480546040516370a0823160e01b81523392810192909252906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190610c11565b10156104565760405162461bcd60e51b815260040161028390610c2a565b6001600160a01b03811661046c5761046c610c7e565b6000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190610b80565b6001600160a01b0380821660009081526002602052604090205491925016156105575760405162461bcd60e51b815260206004820152603360248201527f6164645661756c743a205661756c7420776974682074686973206173736574206044820152721d1bdad95b88185b1c9958591e481859191959606a1b6064820152608401610283565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b038085166001600160a01b0319928316811790935583166000908152600260205260408082208054909316841790925590517f7b7ef7a864d96a85497a1ed846adb39940dd6ccef678ff6ac8d55505e09b8cc49190a25050565b80336001600160a01b0316816001600160a01b031663893d20e86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190610b80565b6001600160a01b0316146106bf5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c795661756c744f776e65723a2043616c6c6572206973206e6f7420746860448201526c32903b30bab63a1037bbb732b960991b6064820152608401610283565b6001548310156107e357825b600180546106d99190610bb3565b8110156107635760016106ec8282610bca565b815481106106fc576106fc610b6a565b600091825260209091200154600180546001600160a01b03909216918390811061072857610728610b6a565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061075b81610be2565b9150506106cb565b50600180548061077557610775610bfb565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b03851680825260029093526040808220805490931690925590517fe71f3a50e5ad81964f352c411f1d45e35438ecd1acecef59ac81d9fbbf6cbc0a9190a25b505050565b600181815481106107f857600080fd5b6000918252602090912001546001600160a01b0316905081565b600480546040516370a0823160e01b81523392810192909252906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190610c11565b10156108bf5760405162461bcd60e51b815260040161028390610c2a565b6001600160a01b0381811660009081526003602052604090205416156109275760405162461bcd60e51b815260206004820152601f60248201527f6164644d61726b65743a204d61726b657420616c7265616479206164646564006044820152606401610283565b6001600160a01b03811660008181526003602052604080822080546001600160a01b0319908116851790915582546001810184558380527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805490911684179055517fbc600b1f03d316c479b49930c28e328809316458d5b5dacbb7419df5f6f896479190a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a3d5760405162461bcd60e51b815260206004820152602b60248201527f6f6e6c794f776e65723a2043616c6c6572206973206e6f742074686520636f6e60448201526a3a3930b1ba1037bbb732b960a91b6064820152608401610283565b6004548103610a9a5760405162461bcd60e51b815260206004820152602360248201527f7365745468726573686f6c643a205468726573686f6c6420616c7265616479206044820152621cd95d60ea1b6064820152608401610283565b60048190556040518181527fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe1719060200160405180910390a150565b600081815481106107f857600080fd5b600060208284031215610af757600080fd5b5035919050565b6001600160a01b0381168114610b1357600080fd5b50565b600060208284031215610b2857600080fd5b8135610b3381610afe565b9392505050565b60008060408385031215610b4d57600080fd5b823591506020830135610b5f81610afe565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610b9257600080fd5b8151610b3381610afe565b634e487b7160e01b600052601160045260246000fd5b600082821015610bc557610bc5610b9d565b500390565b60008219821115610bdd57610bdd610b9d565b500190565b600060018201610bf457610bf4610b9d565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215610c2357600080fd5b5051919050565b60208082526034908201527f6f6e6c79546f6b656e486f6c646572733a2043616c6c657220646f6573206e6f6040820152737420686f6c6420656e6f75676820746f6b656e7360601b606082015260800190565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220640c513c10f9320fab5d89c85c15ec8d9698744375500347352610fd33db59c864736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806393e306331161006657806393e3063314610130578063960bfe0414610143578063a7c6a10014610156578063b1283e7714610168578063ec9790821461017b57600080fd5b8063054660e6146100a3578063256b5a02146100b85780632dad2999146100cb578063893d20e8146100de5780638c64ea4a1461011d575b600080fd5b6100b66100b1366004610ae5565b610183565b005b6100b66100c6366004610b16565b6103a9565b6100b66100d9366004610b3a565b6105e6565b7f00000000000000000000000000000000000000000000000000000000000000005b6040516001600160a01b0390911681526020015b60405180910390f35b61010061012b366004610ae5565b6107e8565b6100b661013e366004610b16565b610812565b6100b6610151366004610ae5565b6109b1565b6001545b604051908152602001610114565b610100610176366004610ae5565b610ad5565b60005461015a565b600054811061018f5750565b60008082815481106101a3576101a3610b6a565b6000918252602091829020015460408051631127a41d60e31b815290516001600160a01b0390921693503392849263893d20e89260048082019392918290030181865afa1580156101f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021c9190610b80565b6001600160a01b03161461028c5760405162461bcd60e51b815260206004820152602c60248201527f72656d6f76654d61726b65743a2043616c6c6572206973206e6f74207468652060448201526b36b0b935b2ba1037bbb732b960a11b60648201526084015b60405180910390fd5b815b60005461029d90600190610bb3565b8110156103265760006102b1826001610bca565b815481106102c1576102c1610b6a565b600091825260208220015481546001600160a01b039091169190839081106102eb576102eb610b6a565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061031e81610be2565b91505061028e565b50600080548061033857610338610bfb565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b03841680825260039093526040808220805490931690925590517f59d7b1e52008dc342c9421dadfc773114b914a65682a4e4b53cf60a970df0d779190a25050565b600480546040516370a0823160e01b81523392810192909252906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610414573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104389190610c11565b10156104565760405162461bcd60e51b815260040161028390610c2a565b6001600160a01b03811661046c5761046c610c7e565b6000816001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d09190610b80565b6001600160a01b0380821660009081526002602052604090205491925016156105575760405162461bcd60e51b815260206004820152603360248201527f6164645661756c743a205661756c7420776974682074686973206173736574206044820152721d1bdad95b88185b1c9958591e481859191959606a1b6064820152608401610283565b600180548082019091557fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60180546001600160a01b038085166001600160a01b0319928316811790935583166000908152600260205260408082208054909316841790925590517f7b7ef7a864d96a85497a1ed846adb39940dd6ccef678ff6ac8d55505e09b8cc49190a25050565b80336001600160a01b0316816001600160a01b031663893d20e86040518163ffffffff1660e01b8152600401602060405180830381865afa15801561062f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106539190610b80565b6001600160a01b0316146106bf5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c795661756c744f776e65723a2043616c6c6572206973206e6f7420746860448201526c32903b30bab63a1037bbb732b960991b6064820152608401610283565b6001548310156107e357825b600180546106d99190610bb3565b8110156107635760016106ec8282610bca565b815481106106fc576106fc610b6a565b600091825260209091200154600180546001600160a01b03909216918390811061072857610728610b6a565b600091825260209091200180546001600160a01b0319166001600160a01b03929092169190911790558061075b81610be2565b9150506106cb565b50600180548061077557610775610bfb565b60008281526020808220830160001990810180546001600160a01b031990811690915593019093556001600160a01b03851680825260029093526040808220805490931690925590517fe71f3a50e5ad81964f352c411f1d45e35438ecd1acecef59ac81d9fbbf6cbc0a9190a25b505050565b600181815481106107f857600080fd5b6000918252602090912001546001600160a01b0316905081565b600480546040516370a0823160e01b81523392810192909252906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa15801561087d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a19190610c11565b10156108bf5760405162461bcd60e51b815260040161028390610c2a565b6001600160a01b0381811660009081526003602052604090205416156109275760405162461bcd60e51b815260206004820152601f60248201527f6164644d61726b65743a204d61726b657420616c7265616479206164646564006044820152606401610283565b6001600160a01b03811660008181526003602052604080822080546001600160a01b0319908116851790915582546001810184558380527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301805490911684179055517fbc600b1f03d316c479b49930c28e328809316458d5b5dacbb7419df5f6f896479190a250565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610a3d5760405162461bcd60e51b815260206004820152602b60248201527f6f6e6c794f776e65723a2043616c6c6572206973206e6f742074686520636f6e60448201526a3a3930b1ba1037bbb732b960a91b6064820152608401610283565b6004548103610a9a5760405162461bcd60e51b815260206004820152602360248201527f7365745468726573686f6c643a205468726573686f6c6420616c7265616479206044820152621cd95d60ea1b6064820152608401610283565b60048190556040518181527fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe1719060200160405180910390a150565b600081815481106107f857600080fd5b600060208284031215610af757600080fd5b5035919050565b6001600160a01b0381168114610b1357600080fd5b50565b600060208284031215610b2857600080fd5b8135610b3381610afe565b9392505050565b60008060408385031215610b4d57600080fd5b823591506020830135610b5f81610afe565b809150509250929050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610b9257600080fd5b8151610b3381610afe565b634e487b7160e01b600052601160045260246000fd5b600082821015610bc557610bc5610b9d565b500390565b60008219821115610bdd57610bdd610b9d565b500190565b600060018201610bf457610bf4610b9d565b5060010190565b634e487b7160e01b600052603160045260246000fd5b600060208284031215610c2357600080fd5b5051919050565b60208082526034908201527f6f6e6c79546f6b656e486f6c646572733a2043616c6c657220646f6573206e6f6040820152737420686f6c6420656e6f75676820746f6b656e7360601b606082015260800190565b634e487b7160e01b600052600160045260246000fdfea2646970667358221220640c513c10f9320fab5d89c85c15ec8d9698744375500347352610fd33db59c864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13209,
        "contract": "contracts/Registry.sol:Registry",
        "label": "markets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13212,
        "contract": "contracts/Registry.sol:Registry",
        "label": "vaults",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13216,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_vaultByAsset",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13220,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_markets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13227,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_threshold",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}