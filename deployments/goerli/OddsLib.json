{
  "address": "0x2fc6Ae36691A9cd57B3dB9F22883efCd68Eda6E9",
  "abi": [
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getCurvedAdjustedOdds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getLinearAdjustedOdds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xe34b4b935998b35d90da23db060fe97622588167ad1248235c854681da0f8986",
  "receipt": {
    "to": null,
    "from": "0x1Ab4C6d9e25Fc65C917aFBEfB4E963C400Fb9814",
    "contractAddress": "0x2fc6Ae36691A9cd57B3dB9F22883efCd68Eda6E9",
    "transactionIndex": 47,
    "gasUsed": "548733",
    "logsBloom": "0x
    "blockHash": "0x92376d88c45c8bccbd8a55f8733d09e9bd2fd70977fa2b5f71ae5dc04fb1ca71",
    "transactionHash": "0xe34b4b935998b35d90da23db060fe97622588167ad1248235c854681da0f8986",
    "logs": [],
    "blockNumber": 8413420,
    "cumulativeGasUsed": "12243952",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f0d1e3127cf87b77ede243c3423713ff",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getCurvedAdjustedOdds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getLinearAdjustedOdds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OddsLib.sol\":\"OddsLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/OddsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary OddsLib {\\n\\n    uint256 public constant PRECISION = 1e6;\\n\\n    /*\\n        * @dev Adjust the odds downwards linearly to 1\\n        * @param wager The amount wagered\\n        * @param pool The total amount in the pool\\n        * @return The adjusted decimal odds given\\n    */\\n    function getLinearAdjustedOdds(\\n        uint256 wager,\\n        uint256 odds,\\n        uint256 liquidity\\n    ) external pure returns (uint256) {\\n        assert(odds >= 1 * PRECISION);\\n        uint256 unadjustedPayout = odds * wager / PRECISION;\\n\\t\\tuint256 oddsAdjustment = Math.mulDiv(odds, unadjustedPayout, liquidity + wager, Math.Rounding.Down);\\n        // If we have gone past the floor, clip to 1\\n        if (oddsAdjustment > odds) {\\n            return 1 * PRECISION;\\n        }\\n        return Math.max(1 * PRECISION, odds - oddsAdjustment);\\n    }\\n\\n    /*\\n        * @dev Reduces odds on a curve that approaches 0 as the payout increases, such that the payout will always be less then free liquidity. Increase the coefficient to make the curve steeper. 2 is a good starting point.\\n        * @param wager The amount of the wager\\n        * @param odds The decimals odds of the wager, expressed as a number\\n        * @return The new adjusted decimal odds\\n    */\\n    function getCurvedAdjustedOdds(\\n        uint256 wager,\\n        uint256 odds,\\n        uint256 liquidity\\n    ) external pure returns (uint256) {\\n        assert(odds >= 1 * PRECISION);\\n        uint256 SQRT_PRECISION = 1e3;\\n        uint256 potentialPayout = (wager * odds / PRECISION);\\n        uint256 adjustedPayout = (liquidity + wager) -\\n            (liquidity * SQRT_PRECISION) /\\n            Math.sqrt(\\n                2 * (potentialPayout * PRECISION) / liquidity + (1 * PRECISION),\\n                Math.Rounding.Up\\n            );\\n        // Return the odds need to generate this adjusted payout with the given wager\\n        return Math.max(1 * PRECISION, (adjustedPayout * PRECISION) / wager);\\n    }\\n}\",\"keccak256\":\"0x1d9e1e42cee9ef41d5febe3be7ad94bac23e69d9be1863a254850ca73b08cda5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6108fc610053600b82828239805160001a607314610046577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80639c90641f14610050578063a19dec4314610080578063aaf5eb68146100b0575b600080fd5b61006a60048036038101906100659190610678565b6100ce565b60405161007791906106da565b60405180910390f35b61009a60048036038101906100959190610678565b6101cd565b6040516100a791906106da565b60405180910390f35b6100b861027a565b6040516100c591906106da565b60405180910390f35b6000620f424060016100e09190610724565b8310156100f0576100ef61077e565b5b60006103e890506000620f424085876101099190610724565b61011391906107dc565b90506000610161620f4240600161012a9190610724565b86620f42408561013a9190610724565b60026101469190610724565b61015091906107dc565b61015a919061080d565b6001610281565b838661016d9190610724565b61017791906107dc565b8786610183919061080d565b61018d9190610863565b90506101c1620f424060016101a29190610724565b88620f4240846101b29190610724565b6101bc91906107dc565b6102e0565b93505050509392505050565b6000620f424060016101df9190610724565b8310156101ef576101ee61077e565b5b6000620f424085856102019190610724565b61020b91906107dc565b9050600061022785838887610220919061080d565b60006102f9565b90508481111561024a57620f424060016102419190610724565b92505050610273565b61026e620f4240600161025d9190610724565b82876102699190610863565b6102e0565b925050505b9392505050565b620f424081565b60008061028d8461036f565b9050600160028111156102a3576102a2610897565b5b8360028111156102b6576102b5610897565b5b1480156102c4575083818202105b6102cf5760006102d2565b60015b60ff16810191505092915050565b60008183116102ef57816102f1565b825b905092915050565b600080610307868686610468565b90506001600281111561031d5761031c610897565b5b8360028111156103305761032f610897565b5b14801561034e575060008480610349576103486107ad565b5b868809115b1561036357600181610360919061080d565b90505b80915050949350505050565b60008082036103815760009050610463565b6000600161038e84610543565b901c6001901b905060018184816103a8576103a76107ad565b5b048201901c905060018184816103c1576103c06107ad565b5b048201901c905060018184816103da576103d96107ad565b5b048201901c905060018184816103f3576103f26107ad565b5b048201901c9050600181848161040c5761040b6107ad565b5b048201901c90506001818481610425576104246107ad565b5b048201901c9050600181848161043e5761043d6107ad565b5b048201901c905061045f81828581610459576104586107ad565b5b04610624565b9150505b919050565b60008060008019858709858702925082811083820303915050600081036104a357838281610499576104986107ad565b5b049250505061053c565b8084116104af57600080fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b600080600090506000608084901c111561056557608083901c92506080810190505b6000604084901c111561058057604083901c92506040810190505b6000602084901c111561059b57602083901c92506020810190505b6000601084901c11156105b657601083901c92506010810190505b6000600884901c11156105d157600883901c92506008810190505b6000600484901c11156105ec57600483901c92506004810190505b6000600284901c111561060757600283901c92506002810190505b6000600184901c111561061b576001810190505b80915050919050565b60008183106106335781610635565b825b905092915050565b600080fd5b6000819050919050565b61065581610642565b811461066057600080fd5b50565b6000813590506106728161064c565b92915050565b6000806000606084860312156106915761069061063d565b5b600061069f86828701610663565b93505060206106b086828701610663565b92505060406106c186828701610663565b9150509250925092565b6106d481610642565b82525050565b60006020820190506106ef60008301846106cb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061072f82610642565b915061073a83610642565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610773576107726106f5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107e782610642565b91506107f283610642565b925082610802576108016107ad565b5b828204905092915050565b600061081882610642565b915061082383610642565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610858576108576106f5565b5b828201905092915050565b600061086e82610642565b915061087983610642565b92508282101561088c5761088b6106f5565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220cd566cc5481519b5e14c493bf79ebd1a5f5a74f0f2c14eea3323b03f9745e9ff64736f6c634300080f0033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80639c90641f14610050578063a19dec4314610080578063aaf5eb68146100b0575b600080fd5b61006a60048036038101906100659190610678565b6100ce565b60405161007791906106da565b60405180910390f35b61009a60048036038101906100959190610678565b6101cd565b6040516100a791906106da565b60405180910390f35b6100b861027a565b6040516100c591906106da565b60405180910390f35b6000620f424060016100e09190610724565b8310156100f0576100ef61077e565b5b60006103e890506000620f424085876101099190610724565b61011391906107dc565b90506000610161620f4240600161012a9190610724565b86620f42408561013a9190610724565b60026101469190610724565b61015091906107dc565b61015a919061080d565b6001610281565b838661016d9190610724565b61017791906107dc565b8786610183919061080d565b61018d9190610863565b90506101c1620f424060016101a29190610724565b88620f4240846101b29190610724565b6101bc91906107dc565b6102e0565b93505050509392505050565b6000620f424060016101df9190610724565b8310156101ef576101ee61077e565b5b6000620f424085856102019190610724565b61020b91906107dc565b9050600061022785838887610220919061080d565b60006102f9565b90508481111561024a57620f424060016102419190610724565b92505050610273565b61026e620f4240600161025d9190610724565b82876102699190610863565b6102e0565b925050505b9392505050565b620f424081565b60008061028d8461036f565b9050600160028111156102a3576102a2610897565b5b8360028111156102b6576102b5610897565b5b1480156102c4575083818202105b6102cf5760006102d2565b60015b60ff16810191505092915050565b60008183116102ef57816102f1565b825b905092915050565b600080610307868686610468565b90506001600281111561031d5761031c610897565b5b8360028111156103305761032f610897565b5b14801561034e575060008480610349576103486107ad565b5b868809115b1561036357600181610360919061080d565b90505b80915050949350505050565b60008082036103815760009050610463565b6000600161038e84610543565b901c6001901b905060018184816103a8576103a76107ad565b5b048201901c905060018184816103c1576103c06107ad565b5b048201901c905060018184816103da576103d96107ad565b5b048201901c905060018184816103f3576103f26107ad565b5b048201901c9050600181848161040c5761040b6107ad565b5b048201901c90506001818481610425576104246107ad565b5b048201901c9050600181848161043e5761043d6107ad565b5b048201901c905061045f81828581610459576104586107ad565b5b04610624565b9150505b919050565b60008060008019858709858702925082811083820303915050600081036104a357838281610499576104986107ad565b5b049250505061053c565b8084116104af57600080fd5b60008486880990508281118203915080830392506000600186190186169050808604955080840493506001818260000304019050808302841793506000600287600302189050808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080870260020381029050808502955050505050505b9392505050565b600080600090506000608084901c111561056557608083901c92506080810190505b6000604084901c111561058057604083901c92506040810190505b6000602084901c111561059b57602083901c92506020810190505b6000601084901c11156105b657601083901c92506010810190505b6000600884901c11156105d157600883901c92506008810190505b6000600484901c11156105ec57600483901c92506004810190505b6000600284901c111561060757600283901c92506002810190505b6000600184901c111561061b576001810190505b80915050919050565b60008183106106335781610635565b825b905092915050565b600080fd5b6000819050919050565b61065581610642565b811461066057600080fd5b50565b6000813590506106728161064c565b92915050565b6000806000606084860312156106915761069061063d565b5b600061069f86828701610663565b93505060206106b086828701610663565b92505060406106c186828701610663565b9150509250925092565b6106d481610642565b82525050565b60006020820190506106ef60008301846106cb565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061072f82610642565b915061073a83610642565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610773576107726106f5565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006107e782610642565b91506107f283610642565b925082610802576108016107ad565b5b828204905092915050565b600061081882610642565b915061082383610642565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610858576108576106f5565b5b828201905092915050565b600061086e82610642565b915061087983610642565b92508282101561088c5761088b6106f5565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220cd566cc5481519b5e14c493bf79ebd1a5f5a74f0f2c14eea3323b03f9745e9ff64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}