{
  "address": "0xB5EE5025c830333FAeC0C0EdC3D1c3BE2e85e331",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "margin",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "timeoutDays",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Placed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Settled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "nonce",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "close",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureLib.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "back",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "index",
          "type": "uint64"
        }
      ],
      "name": "getBetByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCount",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "index",
          "type": "uint64"
        }
      ],
      "name": "getExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInPlayCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMargin",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        }
      ],
      "name": "getMarketTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        }
      ],
      "name": "getOdds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        }
      ],
      "name": "getPotentialPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalInPlay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "grantSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "isSigner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        }
      ],
      "name": "revokeSigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "index",
          "type": "uint64"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        }
      ],
      "name": "settleMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd21f17c18fe987505ab1492b49c3d4494e82d39eddb810e9862a91a6892abf6e",
  "receipt": {
    "to": null,
    "from": "0x1Ab4C6d9e25Fc65C917aFBEfB4E963C400Fb9814",
    "contractAddress": "0xB5EE5025c830333FAeC0C0EdC3D1c3BE2e85e331",
    "transactionIndex": 47,
    "gasUsed": "4653713",
    "logsBloom": "0x
    "blockHash": "0xa1f7ccceb8305dfebb459a35cab7cca337837130902ac3f4bae8bf00df5b5acb",
    "transactionHash": "0xd21f17c18fe987505ab1492b49c3d4494e82d39eddb810e9862a91a6892abf6e",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 8371195,
        "transactionHash": "0xd21f17c18fe987505ab1492b49c3d4494e82d39eddb810e9862a91a6892abf6e",
        "address": "0xB5EE5025c830333FAeC0C0EdC3D1c3BE2e85e331",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ab4c6d9e25fc65c917afbefb4e963c400fb9814"
        ],
        "data": "0x",
        "logIndex": 729,
        "blockHash": "0xa1f7ccceb8305dfebb459a35cab7cca337837130902ac3f4bae8bf00df5b5acb"
      }
    ],
    "blockNumber": 8371195,
    "cumulativeGasUsed": "27042141",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x740aBFeB154C212f90C9A72F62b2966eC2823b3d",
    0,
    1,
    "0x4A6f5f634ADB5De38f1a2Df457D6a9F3201781c6"
  ],
  "numDeployments": 3,
  "solcInputHash": "4da17d481ba230dd656d7198d1fb92ae",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"margin\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"timeoutDays\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Placed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"nonce\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"close\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureLib.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"back\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"getBetByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"getExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInPlayCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMargin\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"}],\"name\":\"getMarketTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"}],\"name\":\"getOdds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"}],\"name\":\"getPotentialPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInPlay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"grantSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"isSigner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"revokeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"}],\"name\":\"settleMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xd82776ed6975a5939668e068f995acb1394c2f60a12a9ef3f14cacb91b5a8fd4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"./SignatureLib.sol\\\";\\n\\ninterface IMarket {\\n\\tfunction getMargin() external view returns (uint8);\\n\\tfunction getCount() external view returns (uint64);\\n\\tfunction getTotalInPlay() external view returns (uint256);\\n\\tfunction getInPlayCount() external view returns (uint256);\\n\\tfunction getTotalExposure() external view returns (uint256);\\n\\n\\tfunction getBetByIndex(uint64 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool,\\n\\t\\t\\tbytes16,\\n\\t\\t\\tbytes16\\n\\t\\t);\\n\\n\\tfunction getOdds(\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId\\n\\t) external view returns (uint256);\\n\\n\\tfunction getOracleAddress() external view returns (address);\\n\\n\\tfunction getPotentialPayout(\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) external view returns (uint256);\\n\\n\\tfunction getVaultAddress() external view returns (address);\\n\\n\\tfunction back(\\n\\t\\tbytes16 nonce,\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tuint256 close,\\n\\t\\tuint256 end,\\n\\t\\tSignatureLib.Signature calldata sig\\n\\t) external returns (uint256);\\n\\n\\tfunction settle(uint64 index) external;\\n\\tfunction settleMarket(bytes16 marketId) external;\\n}\\n\",\"keccak256\":\"0x17343bf90c869e8301e2d4e3737e575cebe95e00ed5c776b218bc4c9c1c97872\",\"license\":\"MIT\"},\"contracts/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"./SignatureLib.sol\\\";\\n\\n// Binary Oracle\\ninterface IOracle {\\n    function checkResult(\\n        bytes16 marketId,\\n        bytes16 propositionId\\n    ) external view returns (bool);\\n\\n    function getResult(bytes16 marketId) external view returns (bytes16);\\n\\n    function setResult(\\n        bytes16 marketId,\\n        bytes16 propositionId,\\n        SignatureLib.Signature calldata signature\\n    ) external;\\n\\n    event ResultSet(bytes16 indexed marketId, bytes16 indexed propositionId);\\n}\",\"keccak256\":\"0xad0cf2753f891f7ca48fcc65ad33f32b77f7c88983faf4640f9650f70b5f60a3\",\"license\":\"MIT\"},\"contracts/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IVault is IERC20Metadata, IERC4626 {\\n    function getPerformance() external view returns (uint256);\\n    function getMarket() external view returns (address);\\n    function getMarketAllowance() external view returns (uint256);\\n    function setMarket(address market, uint256 max) external;\\n    function totalAssetsLocked() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x166b9468e18cbb900fb6f2dc8c239477d3781889dc50e5a21a9ae56137f036e3\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IMarket.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./SignatureLib.sol\\\";\\nimport \\\"./OddsLib.sol\\\";\\n\\n// Put these in the ERC721 contract\\nstruct Bet {\\n\\tbytes16 propositionId;\\n\\tbytes16 marketId;\\n\\tuint256 amount;\\n\\tuint256 payout;\\n\\tuint256 payoutDate;\\n\\tbool settled;\\n}\\n\\ncontract Market is IMarket, Ownable, ERC721 {\\n\\tuint8 private immutable _margin;\\n\\tIVault private immutable _vault;\\n\\taddress private immutable _self;\\n\\tIOracle private immutable _oracle;\\n\\n\\tuint256 private _inplayCount; // running count of bets\\n\\tBet[] private _bets;\\n\\n\\t// MarketID => Bets Indexes\\n\\tmapping(bytes16 => uint64[]) private _marketBets;\\n\\n\\t// MarketID => amount bet\\n\\tmapping(bytes16 => uint256) private _marketTotal;\\n\\n\\t// MarketID => PropositionID => amount bet\\n\\tmapping(bytes16 => mapping(uint16 => uint256)) private _marketBetAmount;\\n\\n\\t// PropositionID => amount bet\\n\\tmapping(bytes16 => uint256) private _potentialPayout;\\n\\n\\tuint256 private _totalInPlay;\\n\\tuint256 private _totalExposure;\\n\\n\\t// Can claim after this period regardless\\n\\tuint256 public immutable timeout;\\n\\tuint256 public immutable min;\\n\\n\\tmapping(address => bool) private _signers;\\n\\n\\tconstructor(\\n\\t\\tIVault vault,\\n\\t\\tuint8 margin,\\n\\t\\tuint8 timeoutDays,\\n\\t\\taddress oracle\\n\\t)\\n\\tERC721(\\\"Horse Link Bet Slip\\\", \\\"HL-BET\\\") {\\n\\t\\tassert(address(vault) != address(0));\\n\\t\\t_self = address(this);\\n\\t\\t_vault = vault;\\n\\t\\t_margin = margin;\\n\\t\\t_oracle = IOracle(oracle);\\n\\t\\t_signers[owner()] = true;\\n\\n\\t\\ttimeout = timeoutDays * 1 days;\\n\\t\\tmin = 1 hours;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId) public pure override returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(\\\"https://api.horse.link/bet/\\\", tokenId));\\n\\t}\\n\\n\\tfunction getMargin() external view returns (uint8) {\\n\\t\\treturn _margin;\\n\\t}\\n\\n\\tfunction getTotalInPlay() external view returns (uint256) {\\n\\t\\treturn _totalInPlay;\\n\\t}\\n\\n\\tfunction getInPlayCount() external view returns (uint256) {\\n\\t\\treturn _inplayCount;\\n\\t}\\n\\n\\tfunction getCount() external view returns (uint64) {\\n\\t\\treturn _getCount();\\n\\t}\\n\\n\\tfunction _getCount() private view returns (uint64) {\\n\\t\\treturn uint64(_bets.length);\\n\\t}\\n\\n\\tfunction getTotalExposure() external view returns (uint256) {\\n\\t\\treturn _totalExposure;\\n\\t}\\n\\n\\tfunction getOracleAddress() external view returns (address) {\\n\\t\\treturn address(_oracle);\\n\\t}\\n\\n\\tfunction getVaultAddress() external view returns (address) {\\n\\t\\treturn address(_vault);\\n\\t}\\n\\n\\tfunction getExpiry(uint64 index) external view returns (uint256) {\\n\\t\\treturn _getExpiry(index);\\n\\t}\\n\\n\\tfunction getMarketTotal(bytes16 marketId) external view returns (uint256) {\\n\\t\\treturn _marketTotal[marketId];\\n\\t}\\n\\n\\tfunction _getExpiry(uint64 index) private view returns (uint256) {\\n\\t\\treturn _bets[index].payoutDate + timeout;\\n\\t}\\n\\n\\tfunction getBetByIndex(uint64 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256, // payoutDate\\n\\t\\t\\tbool,\\n\\t\\t\\tbytes16, // marketId\\n\\t\\t\\tbytes16 // propositionId\\n\\t\\t)\\n\\t{\\n\\t\\treturn _getBet(index);\\n\\t}\\n\\n\\tfunction _getBet(uint64 index)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool,\\n\\t\\t\\tbytes16,\\n\\t\\t\\tbytes16\\n\\t\\t)\\n\\t{\\n\\t\\tBet memory bet = _bets[index];\\n\\t\\treturn (bet.amount, bet.payout, bet.payoutDate, bet.settled, bet.marketId, bet.propositionId);\\n\\t}\\n\\n\\tfunction getOdds(\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId\\n\\t) external view override returns (uint256) {\\n\\t\\treturn _getOdds(wager, odds, propositionId, marketId);\\n\\t}\\n\\n\\t// Given decimal (\\\"European\\\") odds expressed as the amount one wins for ever unit wagered.\\n\\t// This number represents the to total payout rather than the profit, i.e it includes the return of ther stake.\\n\\t// Hence, these odds will never go below 1, which represents even money.\\n\\tfunction _getOdds(\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId\\n\\t) internal view returns (uint256) {\\n\\t\\tif (wager <= 1 || odds <= 1) return 1;\\n\\n        uint256 pool = _vault.getMarketAllowance();\\n        \\n\\t\\t// If the pool is not sufficient to cover a new bet for this proposition\\n\\t\\tif (pool == 0) return 1;\\n\\n\\t\\t// exclude the current total potential payout from the pool\\n\\t\\tif (_potentialPayout[propositionId] > pool) {\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\n\\t\\tpool -= _potentialPayout[propositionId]; \\n\\n\\t\\t// Calculate the new odds\\n\\t\\tuint256 adjustedOdds = _getAdjustedOdds(wager, odds, pool);\\n\\n\\t\\treturn adjustedOdds;\\n\\t}\\n\\n\\tfunction _getAdjustedOdds(\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tuint256 pool\\n\\t) internal virtual view returns (uint256) {\\n\\t\\treturn OddsLib.getLinearAdjustedOdds(\\n\\t\\t\\twager,\\n\\t\\t\\todds,\\n\\t\\t\\tpool\\n\\t\\t);\\n\\t}\\n\\n\\tfunction getPotentialPayout(\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) external view returns (uint256) {\\n\\t\\treturn _getPayout(propositionId, marketId, wager, odds);\\n\\t}\\n\\n\\tfunction _getPayout(\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) private view returns (uint256) {\\n\\t\\tuint256 trueOdds = _getOdds(wager, odds, propositionId, marketId);\\n\\t\\treturn Math.max(wager, (trueOdds * wager) / OddsLib.PRECISION);\\n\\t}\\n\\n\\tfunction back(\\n\\t\\tbytes16 nonce,\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tuint256 close,\\n\\t\\tuint256 end,\\n\\t\\tSignatureLib.Signature calldata signature\\n\\t) external returns (uint256) {\\n\\n\\t\\tbytes32 messageHash = keccak256(abi.encodePacked(\\n\\t\\t\\tnonce,\\n\\t\\t\\tpropositionId,\\n\\t\\t\\tmarketId,\\n\\t\\t\\todds,\\n\\t\\t\\tclose,\\n\\t\\t\\tend\\n\\t\\t));\\n\\n\\t\\trequire(isValidSignature(messageHash, signature) == true, \\\"back: Invalid signature\\\");\\n\\n\\t\\t// add underlying to the market\\n\\t\\tuint256 payout = _getPayout(propositionId, marketId, wager, odds);\\n\\t\\tassert(payout > 0);\\n\\n\\t\\treturn _back(\\n\\t\\t\\tpropositionId,\\n\\t\\t\\tmarketId,\\n\\t\\t\\twager,\\n\\t\\t\\tclose,\\n\\t\\t\\tend,\\n\\t\\t\\tpayout\\n\\t\\t);\\n\\t}\\n\\n\\tfunction _back(\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 close,\\n\\t\\tuint256 end,\\n\\t\\tuint256 payout\\n\\t) internal returns (uint256) {\\n\\t\\trequire(\\n\\t\\t\\tend > block.timestamp && close > block.timestamp,\\n\\t\\t\\t\\\"back: Invalid date\\\"\\n\\t\\t);\\n\\n\\t\\t// Do not allow a bet placed if we know the result\\n\\t\\trequire(\\n\\t\\t\\tIOracle(_oracle).checkResult(marketId, propositionId) == false,\\n\\t\\t\\t\\\"back: Oracle result already set for this market\\\"\\n\\t\\t);\\n\\n        address underlying = _vault.asset();\\n\\n        // escrow\\n        IERC20(underlying).transferFrom(_msgSender(), _self, wager);\\n        IERC20(underlying).transferFrom(address(_vault), _self, (payout - wager));\\n\\n\\t\\t// add to in play total for this marketId\\n\\t\\t_marketTotal[marketId] += wager;\\n\\n\\t\\t// add to the total potential payout for this proposition\\n\\t\\t_potentialPayout[propositionId] += payout;\\n\\n\\t\\tuint64 index = _getCount();\\n\\n\\t\\t_bets.push(\\n\\t\\t\\tBet(propositionId, marketId, wager, payout, end, false)\\n\\t\\t);\\n\\n\\t\\t_marketBets[marketId].push(index);\\n\\t\\t_mint(_msgSender(), index);\\n\\n\\t\\t_totalInPlay += wager;\\n\\t\\t_totalExposure += (payout - wager);\\n\\t\\t_inplayCount++;\\n\\n\\t\\temit Placed(index, propositionId, marketId, wager, payout, _msgSender());\\n\\n\\t\\treturn index;\\n\\t}\\n\\n\\tfunction settle(uint64 index) external {\\n\\t\\tBet memory bet = _bets[index];\\n\\t\\trequire(bet.settled == false, \\\"settle: Bet has already settled\\\");\\n\\n\\t\\t_settle(index);\\n\\t}\\n\\n\\tfunction _settle(uint64 index) internal {\\n\\t\\t_bets[index].settled = true;\\n\\n\\t\\tif (block.timestamp > _getExpiry(index)) {\\n\\t\\t\\t_payout(index, true);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\n\\t\\tBet memory bet = _bets[index];\\n\\t\\tbool result = IOracle(_oracle).checkResult(\\n\\t\\t\\tbet.marketId,\\n\\t\\t\\tbet.propositionId\\n\\t\\t);\\n\\n\\t\\t_payout(index, result);\\n\\t}\\n\\n\\tfunction _payout(uint256 index, bool result) private {\\n\\t\\trequire(\\n\\t\\t\\t_bets[index].payoutDate < block.timestamp,\\n\\t\\t\\t\\\"_settle: Payout date not reached\\\"\\n\\t\\t);\\n\\n        _totalInPlay -= _bets[index].amount;\\n        _totalExposure -= _bets[index].payout - _bets[index].amount;\\n        _inplayCount --;\\n\\n        address underlying = _vault.asset();\\n\\t\\t// Transfer the proceeds to the owner of the NFT\\n\\t\\taddress recipient = ownerOf(index);\\n\\n        if (result == false) {\\n            // Transfer the proceeds to the vault, less market margin\\n            recipient = address(_vault);\\n        }\\n\\n\\t\\tIERC20(underlying).transfer(recipient, _bets[index].payout);\\n\\t\\t_burn(index);\\n\\n\\t\\temit Settled(index, _bets[index].payout, result, recipient);\\n\\t}\\n\\n\\tfunction settleMarket(bytes16 marketId) external {\\n\\t\\tuint64[] memory bets = _marketBets[marketId];\\n\\t\\tuint256 total = bets.length;\\n\\n\\t\\tfor (uint64 i = 0; i < total; i++) {\\n\\t\\t\\tuint64 index = bets[i];\\n\\n\\t\\t\\tBet memory bet = _bets[index];\\n\\t\\t\\tif (bet.settled == false) {\\n\\t\\t\\t\\t_settle(index);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction grantSigner(address signer) external onlyOwner {\\n\\t\\trequire(signer != address(0), \\\"grantSigner: Invalid signer address\\\");\\n\\t\\t_signers[signer] = true;\\n\\t}\\n\\n\\tfunction revokeSigner(address signer) external onlyOwner {\\n\\t\\trequire(signer != address(0), \\\"revokeSigner: Invalid signer address\\\");\\n\\t\\t_signers[signer] = false;\\n\\t}\\n\\n\\tfunction isSigner(address signer) external view returns (bool) {\\n\\t\\treturn _isSigner(signer);\\n\\t}\\n\\n\\tfunction _isSigner(address signer) internal view returns (bool) {\\n\\t\\treturn _signers[signer];\\n\\t}\\n\\n\\tfunction isValidSignature(bytes32 messageHash, SignatureLib.Signature calldata signature) internal view returns (bool) {\\n\\t\\taddress signer = SignatureLib.recoverSigner(messageHash, signature);\\n\\t\\tassert(signer != address(0));\\n\\t\\treturn _isSigner(signer);\\n\\t}\\n\\n\\tevent Placed(\\n\\t\\tuint256 index,\\n\\t\\tbytes16 propositionId,\\n\\t\\tbytes16 marketId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 payout,\\n\\t\\taddress indexed owner\\n\\t);\\n\\n\\tevent Settled(\\n\\t\\tuint256 index,\\n\\t\\tuint256 payout,\\n\\t\\tbool result,\\n\\t\\taddress indexed recipient\\n\\t);\\n}\\n\",\"keccak256\":\"0xe029dd44879b98809914355e64b1319919f3a8cbab03017383689f55f59cc6f7\",\"license\":\"MIT\"},\"contracts/OddsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary OddsLib {\\n\\n    uint256 public constant PRECISION = 1e6;\\n\\n    /*\\n        * @dev Adjust the odds downwards linearly to 1\\n        * @param wager The amount wagered\\n        * @param pool The total amount in the pool\\n        * @return The adjusted decimal odds given\\n    */\\n    function getLinearAdjustedOdds(\\n        uint256 wager,\\n        uint256 odds,\\n        uint256 liquidity\\n    ) external pure returns (uint256) {\\n        assert(odds >= 1 * PRECISION);\\n        uint256 unadjustedPayout = odds * wager / PRECISION;\\n\\t\\tuint256 oddsAdjustment = Math.mulDiv(odds, unadjustedPayout, liquidity + wager, Math.Rounding.Down);\\n        // If we have gone past the floor, clip to 1\\n        if (oddsAdjustment > odds) {\\n            return 1 * PRECISION;\\n        }\\n        return Math.max(1 * PRECISION, odds - oddsAdjustment);\\n    }\\n\\n    /*\\n        * @dev Reduces odds on a curve that approaches 0 as the payout increases, such that the payout will always be less then free liquidity. Increase the coefficient to make the curve steeper. 2 is a good starting point.\\n        * @param wager The amount of the wager\\n        * @param odds The decimals odds of the wager, expressed as a number\\n        * @return The new adjusted decimal odds\\n    */\\n    function getCurvedAdjustedOdds(\\n        uint256 wager,\\n        uint256 odds,\\n        uint256 liquidity\\n    ) external pure returns (uint256) {\\n        assert(odds >= 1 * PRECISION);\\n        uint256 SQRT_PRECISION = 1e3;\\n        uint256 potentialPayout = (wager * odds / PRECISION);\\n        uint256 adjustedPayout = (liquidity + wager) -\\n            (liquidity * SQRT_PRECISION) /\\n            Math.sqrt(\\n                2 * (potentialPayout * PRECISION) / liquidity + (1 * PRECISION),\\n                Math.Rounding.Up\\n            );\\n        // Return the odds need to generate this adjusted payout with the given wager\\n        return Math.max(1 * PRECISION, (adjustedPayout * PRECISION) / wager);\\n    }\\n}\",\"keccak256\":\"0x1d9e1e42cee9ef41d5febe3be7ad94bac23e69d9be1863a254850ca73b08cda5\",\"license\":\"MIT\"},\"contracts/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nlibrary SignatureLib {\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        bytes32 prefixedHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\n        );\\n        return ecrecover(prefixedHash, signature.v, signature.r, signature.s);\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aea16b52e98b22e10addc4401c67151de809a94688cc5fa7c0e5529b65ccb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162005ab038038062005ab0833981810160405281019062000038919062000453565b6040518060400160405280601381526020017f486f727365204c696e6b2042657420536c6970000000000000000000000000008152506040518060400160405280600681526020017f484c2d4245540000000000000000000000000000000000000000000000000000815250620000c4620000b86200027160201b60201c565b6200027960201b60201c565b8160019081620000d591906200073f565b508060029081620000e791906200073f565b505050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036200012a576200012962000826565b5b3073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508260ff1660808160ff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250506001600f6000620001ea6200033d60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550620151808260ff166200024f919062000893565b62ffffff166101008181525050610e10610120818152505050505050620008d7565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000398826200036b565b9050919050565b6000620003ac826200038b565b9050919050565b620003be816200039f565b8114620003ca57600080fd5b50565b600081519050620003de81620003b3565b92915050565b600060ff82169050919050565b620003fc81620003e4565b81146200040857600080fd5b50565b6000815190506200041c81620003f1565b92915050565b6200042d816200038b565b81146200043957600080fd5b50565b6000815190506200044d8162000422565b92915050565b6000806000806080858703121562000470576200046f62000366565b5b60006200048087828801620003cd565b945050602062000493878288016200040b565b9350506040620004a6878288016200040b565b9250506060620004b9878288016200043c565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200054757607f821691505b6020821081036200055d576200055c620004ff565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005c77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000588565b620005d3868362000588565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620006206200061a6200061484620005eb565b620005f5565b620005eb565b9050919050565b6000819050919050565b6200063c83620005ff565b620006546200064b8262000627565b84845462000595565b825550505050565b600090565b6200066b6200065c565b6200067881848462000631565b505050565b5b81811015620006a0576200069460008262000661565b6001810190506200067e565b5050565b601f821115620006ef57620006b98162000563565b620006c48462000578565b81016020851015620006d4578190505b620006ec620006e38562000578565b8301826200067d565b50505b505050565b600082821c905092915050565b60006200071460001984600802620006f4565b1980831691505092915050565b60006200072f838362000701565b9150826002028217905092915050565b6200074a82620004c5565b67ffffffffffffffff811115620007665762000765620004d0565b5b6200077282546200052e565b6200077f828285620006a4565b600060209050601f831160018114620007b75760008415620007a2578287015190505b620007ae858262000721565b8655506200081e565b601f198416620007c78662000563565b60005b82811015620007f157848901518255600182019150602085019450602081019050620007ca565b868310156200081157848901516200080d601f89168262000701565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600062ffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008a08262000855565b9150620008ad8362000855565b92508162ffffff0483118215151615620008cc57620008cb62000864565b5b828202905092915050565b60805160a05160c05160e051610100516101205161514a620009666000396000611594015260008181610f810152612aaf0152600081816112de0152818161188e0152612518015260008181611a230152611ae4015260008181610e7d0152818161196e01528181611ac30152818161226401528181613068015261311201526000610b5d015261514a6000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806370dea79a11610125578063b18b78dd116100ad578063c96121a81161007c578063c96121a814610668578063e4650fac14610686578063e985e9c5146106b6578063f2fde38b146106e6578063f8897945146107025761021c565b8063b18b78dd146105e2578063b88d4fde14610600578063c34b44a01461061c578063c87b56dd146106385761021c565b80638ac6d217116100f45780638ac6d2171461054e5780638da5cb5b1461056c57806395d89b411461058a578063a22cb465146105a8578063a87d942c146105c45761021c565b806370dea79a146104da578063715018a6146104f85780637df73e271461050257806388bc76ba146105325761021c565b806346e116a6116101a85780636352211e116101775780636352211e1461040b57806363c724f71461043b57806365cacaa4146104575780636b467d151461047557806370a08231146104aa5761021c565b806346e116a6146103715780634b9ba446146103a157806358439479146103bd5780636028421f146103db5761021c565b806312fa3bf1116101ef57806312fa3bf1146102bb578063207b8b53146102eb57806323b872dd1461031b57806325117b721461033757806342842e0e146103555761021c565b806301ffc9a71461022157806306fdde0314610251578063081812fc1461026f578063095ea7b31461029f575b600080fd5b61023b600480360381019061023691906135c2565b610720565b604051610248919061360a565b60405180910390f35b610259610802565b60405161026691906136be565b60405180910390f35b61028960048036038101906102849190613716565b610894565b6040516102969190613784565b60405180910390f35b6102b960048036038101906102b491906137cb565b6108da565b005b6102d560048036038101906102d09190613863565b6109f1565b6040516102e2919061389f565b60405180910390f35b610305600480360381019061030091906138de565b610a34565b604051610312919061389f565b60405180910390f35b61033560048036038101906103309190613994565b610af9565b005b61033f610b59565b60405161034c9190613a03565b60405180910390f35b61036f600480360381019061036a9190613994565b610b81565b005b61038b60048036038101906103869190613a1e565b610ba1565b604051610398919061389f565b60405180910390f35b6103bb60048036038101906103b69190613ac5565b610bb9565b005b6103c5610cff565b6040516103d2919061389f565b60405180910390f35b6103f560048036038101906103f09190613af2565b610d09565b604051610402919061389f565b60405180910390f35b61042560048036038101906104209190613716565b610d21565b6040516104329190613784565b60405180910390f35b61045560048036038101906104509190613b59565b610da7565b005b61045f610e79565b60405161046c9190613784565b60405180910390f35b61048f600480360381019061048a9190613ac5565b610ea1565b6040516104a196959493929190613b95565b60405180910390f35b6104c460048036038101906104bf9190613b59565b610ec8565b6040516104d1919061389f565b60405180910390f35b6104e2610f7f565b6040516104ef919061389f565b60405180910390f35b610500610fa3565b005b61051c60048036038101906105179190613b59565b610fb7565b604051610529919061360a565b60405180910390f35b61054c60048036038101906105479190613863565b610fc9565b005b6105566111f0565b604051610563919061389f565b60405180910390f35b6105746111fa565b6040516105819190613784565b60405180910390f35b610592611223565b60405161059f91906136be565b60405180910390f35b6105c260048036038101906105bd9190613c22565b6112b5565b005b6105cc6112cb565b6040516105d99190613c71565b60405180910390f35b6105ea6112da565b6040516105f79190613784565b60405180910390f35b61061a60048036038101906106159190613dc1565b611302565b005b61063660048036038101906106319190613b59565b611364565b005b610652600480360381019061064d9190613716565b611436565b60405161065f91906136be565b60405180910390f35b61067061145f565b60405161067d919061389f565b60405180910390f35b6106a0600480360381019061069b9190613ac5565b611469565b6040516106ad919061389f565b60405180910390f35b6106d060048036038101906106cb9190613e44565b61147b565b6040516106dd919061360a565b60405180910390f35b61070060048036038101906106fb9190613b59565b61150f565b005b61070a611592565b604051610717919061389f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107eb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107fb57506107fa826115b6565b5b9050919050565b60606001805461081190613eb3565b80601f016020809104026020016040519081016040528092919081815260200182805461083d90613eb3565b801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b5050505050905090565b600061089f82611620565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108e582610d21565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90613f56565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661097461166b565b73ffffffffffffffffffffffffffffffffffffffff1614806109a357506109a28161099d61166b565b61147b565b5b6109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d990613fe8565b60405180910390fd5b6109ec8383611673565b505050565b6000600a6000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b600080898989888888604051602001610a529695949392919061404a565b60405160208183030381529060405280519060200120905060011515610a78828561172c565b151514610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab190614106565b60405180910390fd5b6000610ac88a8a8a8a6117fa565b905060008111610adb57610ada614126565b5b610ae98a8a8a898986611839565b9250505098975050505050505050565b610b0a610b0461166b565b82611eb1565b610b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b40906141c7565b60405180910390fd5b610b54838383611f46565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610b9c83838360405180602001604052806000815250611302565b505050565b6000610baf8585858561223f565b9050949350505050565b600060088267ffffffffffffffff1681548110610bd957610bd86141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600015158160a00151151514610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990614262565b60405180910390fd5b610cfb826123b4565b5050565b6000600d54905090565b6000610d17858585856117fa565b9050949350505050565b600080610d2d836125d6565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d95906142ce565b60405180910390fd5b80915050919050565b610daf612613565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1590614360565b60405180910390fd5b6001600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600080600080610eb387612691565b95509550955095509550955091939550919395565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f906143f2565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610fab612613565b610fb560006127bc565b565b6000610fc282612880565b9050919050565b600060096000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561108257602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161103d5790505b5050505050905060008151905060005b818167ffffffffffffffff1610156111ea576000838267ffffffffffffffff16815181106110c3576110c26141e7565b5b60200260200101519050600060088267ffffffffffffffff16815481106110ed576110ec6141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600015158160a001511515036111d5576111d4826123b4565b5b505080806111e290614441565b915050611092565b50505050565b6000600e54905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002805461123290613eb3565b80601f016020809104026020016040519081016040528092919081815260200182805461125e90613eb3565b80156112ab5780601f10611280576101008083540402835291602001916112ab565b820191906000526020600020905b81548152906001019060200180831161128e57829003601f168201915b5050505050905090565b6112c76112c061166b565b83836128d6565b5050565b60006112d5612a42565b905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61131361130d61166b565b83611eb1565b611352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611349906141c7565b60405180910390fd5b61135e84848484612a4f565b50505050565b61136c612613565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d2906144e3565b60405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b606081604051602001611449919061455a565b6040516020818303038152906040529050919050565b6000600754905090565b600061147482612aab565b9050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611517612613565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157d906145f2565b60405180910390fd5b61158f816127bc565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61162981612b0f565b611668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165f906142ce565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166116e683610d21565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080732686e2ec431b90b5c5b21408771ebf377dbb07bd635cff288d85856040518363ffffffff1660e01b8152600401611768929190614729565b602060405180830381865af4158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190614767565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117e8576117e7614126565b5b6117f181612880565b91505092915050565b6000806118098484888861223f565b905061182e84620f4240868461181f9190614794565b611829919061481d565b612b50565b915050949350505050565b6000428311801561184957504284115b611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187f9061489a565b60405180910390fd5b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306c77ce7888a6040518363ffffffff1660e01b81526004016118e79291906148ba565b602060405180830381865afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192891906148f8565b15151461196a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196190614997565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fb9190614767565b90508073ffffffffffffffffffffffffffffffffffffffff166323b872dd611a2161166b565b7f0000000000000000000000000000000000000000000000000000000000000000896040518463ffffffff1660e01b8152600401611a61939291906149b7565b6020604051808303816000875af1158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa491906148f8565b508073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008987611b0f91906149ee565b6040518463ffffffff1660e01b8152600401611b2d939291906149b7565b6020604051808303816000875af1158015611b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7091906148f8565b5085600a6000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000828254611bba9190614a22565b9250508190555082600c60008a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000828254611c0a9190614a22565b925050819055506000611c1b612a42565b905060086040518060c001604052808b6fffffffffffffffffffffffffffffffff191681526020018a6fffffffffffffffffffffffffffffffff1916815260200189815260200186815260200187815260200160001515815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060408201518160010155606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff021916908315150217905550505060096000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611de6611dd661166b565b8267ffffffffffffffff16612b69565b86600d6000828254611df89190614a22565b925050819055508684611e0b91906149ee565b600e6000828254611e1c9190614a22565b9250508190555060076000815480929190611e3690614a78565b9190505550611e4361166b565b73ffffffffffffffffffffffffffffffffffffffff167f1d273ea6a1aea94de32fd06a09ab8046dff8e3261c5a4ecaa5e1a5705f3342ec828b8b8b89604051611e90959493929190614afb565b60405180910390a28067ffffffffffffffff16925050509695505050505050565b600080611ebd83610d21565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611eff5750611efe818561147b565b5b80611f3d57508373ffffffffffffffffffffffffffffffffffffffff16611f2584610894565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f6682610d21565b73ffffffffffffffffffffffffffffffffffffffff1614611fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb390614bc0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361202b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202290614c52565b60405180910390fd5b6120388383836001612d86565b8273ffffffffffffffffffffffffffffffffffffffff1661205882610d21565b73ffffffffffffffffffffffffffffffffffffffff16146120ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a590614bc0565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461223a8383836001612eac565b505050565b6000600185111580612252575060018411155b1561226057600190506123ac565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b15031fa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f19190614c87565b9050600081036123055760019150506123ac565b80600c6000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000205411156123505760019150506123ac565b600c6000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020548161239591906149ee565b905060006123a4878784612eb2565b905080925050505b949350505050565b600160088267ffffffffffffffff16815481106123d4576123d36141e7565b5b906000526020600020906005020160040160006101000a81548160ff02191690831515021790555061240581612aab565b421115612426576124218167ffffffffffffffff166001612f39565b6125d3565b600060088267ffffffffffffffff1681548110612446576124456141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306c77ce7836020015184600001516040518363ffffffff1660e01b81526004016125799291906148ba565b602060405180830381865afa158015612596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ba91906148f8565b90506125d08367ffffffffffffffff1682612f39565b50505b50565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61261b61166b565b73ffffffffffffffffffffffffffffffffffffffff166126396111fa565b73ffffffffffffffffffffffffffffffffffffffff161461268f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268690614d00565b60405180910390fd5b565b600080600080600080600060088867ffffffffffffffff16815481106126ba576126b96141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090508060400151816060015182608001518360a00151846020015185600001519650965096509650965096505091939550919395565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612944576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293b90614d6c565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612a35919061360a565b60405180910390a3505050565b6000600880549050905090565b612a5a848484611f46565b612a668484848461325e565b612aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9c90614dfe565b60405180910390fd5b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000060088367ffffffffffffffff1681548110612aec57612aeb6141e7565b5b906000526020600020906005020160030154612b089190614a22565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612b31836125d6565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000818311612b5f5781612b61565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcf90614e6a565b60405180910390fd5b612be181612b0f565b15612c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1890614ed6565b60405180910390fd5b612c2f600083836001612d86565b612c3881612b0f565b15612c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6f90614ed6565b60405180910390fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d82600083836001612eac565b5050565b6001811115612ea657600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612e1a5780600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e1291906149ee565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612ea55780600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e9d9190614a22565b925050819055505b5b50505050565b50505050565b6000731C3A4A0FACbdC8237469C312E3B121E8A97864c063a19dec438585856040518463ffffffff1660e01b8152600401612eef93929190614f05565b602060405180830381865af4158015612f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f309190614c87565b90509392505050565b4260088381548110612f4e57612f4d6141e7565b5b90600052602060002090600502016003015410612fa0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f9790614f88565b60405180910390fd5b60088281548110612fb457612fb36141e7565b5b906000526020600020906005020160010154600d6000828254612fd791906149ee565b9250508190555060088281548110612ff257612ff16141e7565b5b90600052602060002090600502016001015460088381548110613018576130176141e7565b5b90600052602060002090600502016002015461303491906149ee565b600e600082825461304591906149ee565b925050819055506007600081548092919061305f90614fa8565b919050555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f59190614767565b9050600061310284610d21565b90506000151583151503613134577f000000000000000000000000000000000000000000000000000000000000000090505b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8260088781548110613165576131646141e7565b5b9060005260206000209060050201600201546040518363ffffffff1660e01b8152600401613194929190614fd1565b6020604051808303816000875af11580156131b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d791906148f8565b506131e1846133e5565b8073ffffffffffffffffffffffffffffffffffffffff167f08a2a3d90b4a86017a5adf7503073c6b2b44051c48e9844a336190c9793c4af9856008878154811061322e5761322d6141e7565b5b9060005260206000209060050201600201548660405161325093929190614ffa565b60405180910390a250505050565b600061327f8473ffffffffffffffffffffffffffffffffffffffff16613533565b156133d8578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026132a861166b565b8786866040518563ffffffff1660e01b81526004016132ca9493929190615086565b6020604051808303816000875af192505050801561330657506040513d601f19601f8201168201806040525081019061330391906150e7565b60015b613388573d8060008114613336576040519150601f19603f3d011682016040523d82523d6000602084013e61333b565b606091505b506000815103613380576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161337790614dfe565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506133dd565b600190505b949350505050565b60006133f082610d21565b9050613400816000846001612d86565b61340982610d21565b90506005600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506003600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461352f816000846001612eac565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61359f8161356a565b81146135aa57600080fd5b50565b6000813590506135bc81613596565b92915050565b6000602082840312156135d8576135d7613560565b5b60006135e6848285016135ad565b91505092915050565b60008115159050919050565b613604816135ef565b82525050565b600060208201905061361f60008301846135fb565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561365f578082015181840152602081019050613644565b8381111561366e576000848401525b50505050565b6000601f19601f8301169050919050565b600061369082613625565b61369a8185613630565b93506136aa818560208601613641565b6136b381613674565b840191505092915050565b600060208201905081810360008301526136d88184613685565b905092915050565b6000819050919050565b6136f3816136e0565b81146136fe57600080fd5b50565b600081359050613710816136ea565b92915050565b60006020828403121561372c5761372b613560565b5b600061373a84828501613701565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061376e82613743565b9050919050565b61377e81613763565b82525050565b60006020820190506137996000830184613775565b92915050565b6137a881613763565b81146137b357600080fd5b50565b6000813590506137c58161379f565b92915050565b600080604083850312156137e2576137e1613560565b5b60006137f0858286016137b6565b925050602061380185828601613701565b9150509250929050565b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6138408161380b565b811461384b57600080fd5b50565b60008135905061385d81613837565b92915050565b60006020828403121561387957613878613560565b5b60006138878482850161384e565b91505092915050565b613899816136e0565b82525050565b60006020820190506138b46000830184613890565b92915050565b600080fd5b6000606082840312156138d5576138d46138ba565b5b81905092915050565b600080600080600080600080610140898b0312156138ff576138fe613560565b5b600061390d8b828c0161384e565b985050602061391e8b828c0161384e565b975050604061392f8b828c0161384e565b96505060606139408b828c01613701565b95505060806139518b828c01613701565b94505060a06139628b828c01613701565b93505060c06139738b828c01613701565b92505060e06139848b828c016138bf565b9150509295985092959890939650565b6000806000606084860312156139ad576139ac613560565b5b60006139bb868287016137b6565b93505060206139cc868287016137b6565b92505060406139dd86828701613701565b9150509250925092565b600060ff82169050919050565b6139fd816139e7565b82525050565b6000602082019050613a1860008301846139f4565b92915050565b60008060008060808587031215613a3857613a37613560565b5b6000613a4687828801613701565b9450506020613a5787828801613701565b9350506040613a688782880161384e565b9250506060613a798782880161384e565b91505092959194509250565b600067ffffffffffffffff82169050919050565b613aa281613a85565b8114613aad57600080fd5b50565b600081359050613abf81613a99565b92915050565b600060208284031215613adb57613ada613560565b5b6000613ae984828501613ab0565b91505092915050565b60008060008060808587031215613b0c57613b0b613560565b5b6000613b1a8782880161384e565b9450506020613b2b8782880161384e565b9350506040613b3c87828801613701565b9250506060613b4d87828801613701565b91505092959194509250565b600060208284031215613b6f57613b6e613560565b5b6000613b7d848285016137b6565b91505092915050565b613b8f8161380b565b82525050565b600060c082019050613baa6000830189613890565b613bb76020830188613890565b613bc46040830187613890565b613bd160608301866135fb565b613bde6080830185613b86565b613beb60a0830184613b86565b979650505050505050565b613bff816135ef565b8114613c0a57600080fd5b50565b600081359050613c1c81613bf6565b92915050565b60008060408385031215613c3957613c38613560565b5b6000613c47858286016137b6565b9250506020613c5885828601613c0d565b9150509250929050565b613c6b81613a85565b82525050565b6000602082019050613c866000830184613c62565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613cce82613674565b810181811067ffffffffffffffff82111715613ced57613cec613c96565b5b80604052505050565b6000613d00613556565b9050613d0c8282613cc5565b919050565b600067ffffffffffffffff821115613d2c57613d2b613c96565b5b613d3582613674565b9050602081019050919050565b82818337600083830152505050565b6000613d64613d5f84613d11565b613cf6565b905082815260208101848484011115613d8057613d7f613c91565b5b613d8b848285613d42565b509392505050565b600082601f830112613da857613da7613c8c565b5b8135613db8848260208601613d51565b91505092915050565b60008060008060808587031215613ddb57613dda613560565b5b6000613de9878288016137b6565b9450506020613dfa878288016137b6565b9350506040613e0b87828801613701565b925050606085013567ffffffffffffffff811115613e2c57613e2b613565565b5b613e3887828801613d93565b91505092959194509250565b60008060408385031215613e5b57613e5a613560565b5b6000613e69858286016137b6565b9250506020613e7a858286016137b6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680613ecb57607f821691505b602082108103613ede57613edd613e84565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000613f40602183613630565b9150613f4b82613ee4565b604082019050919050565b60006020820190508181036000830152613f6f81613f33565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000613fd2603d83613630565b9150613fdd82613f76565b604082019050919050565b6000602082019050818103600083015261400181613fc5565b9050919050565b6000819050919050565b61402361401e8261380b565b614008565b82525050565b6000819050919050565b61404461403f826136e0565b614029565b82525050565b60006140568289614012565b6010820191506140668288614012565b6010820191506140768287614012565b6010820191506140868286614033565b6020820191506140968285614033565b6020820191506140a68284614033565b602082019150819050979650505050505050565b7f6261636b3a20496e76616c6964207369676e6174757265000000000000000000600082015250565b60006140f0601783613630565b91506140fb826140ba565b602082019050919050565b6000602082019050818103600083015261411f816140e3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b60006141b1602d83613630565b91506141bc82614155565b604082019050919050565b600060208201905081810360008301526141e0816141a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f736574746c653a204265742068617320616c726561647920736574746c656400600082015250565b600061424c601f83613630565b915061425782614216565b602082019050919050565b6000602082019050818103600083015261427b8161423f565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006142b8601883613630565b91506142c382614282565b602082019050919050565b600060208201905081810360008301526142e7816142ab565b9050919050565b7f6772616e745369676e65723a20496e76616c6964207369676e6572206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061434a602383613630565b9150614355826142ee565b604082019050919050565b600060208201905081810360008301526143798161433d565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006143dc602983613630565b91506143e782614380565b604082019050919050565b6000602082019050818103600083015261440b816143cf565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061444c82613a85565b915067ffffffffffffffff820361446657614465614412565b5b600182019050919050565b7f7265766f6b655369676e65723a20496e76616c6964207369676e65722061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006144cd602483613630565b91506144d882614471565b604082019050919050565b600060208201905081810360008301526144fc816144c0565b9050919050565b600081905092915050565b7f68747470733a2f2f6170692e686f7273652e6c696e6b2f6265742f0000000000600082015250565b6000614544601b83614503565b915061454f8261450e565b601b82019050919050565b600061456582614537565b91506145718284614033565b60208201915081905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006145dc602683613630565b91506145e782614580565b604082019050919050565b6000602082019050818103600083015261460b816145cf565b9050919050565b6000819050919050565b61462581614612565b82525050565b614634816139e7565b811461463f57600080fd5b50565b6000813590506146518161462b565b92915050565b60006146666020840184614642565b905092915050565b614677816139e7565b82525050565b61468681614612565b811461469157600080fd5b50565b6000813590506146a38161467d565b92915050565b60006146b86020840184614694565b905092915050565b6146c981614612565b82525050565b606082016146e06000830183614657565b6146ed600085018261466e565b506146fb60208301836146a9565b61470860208501826146c0565b5061471660408301836146a9565b61472360408501826146c0565b50505050565b600060808201905061473e600083018561461c565b61474b60208301846146cf565b9392505050565b6000815190506147618161379f565b92915050565b60006020828403121561477d5761477c613560565b5b600061478b84828501614752565b91505092915050565b600061479f826136e0565b91506147aa836136e0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156147e3576147e2614412565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614828826136e0565b9150614833836136e0565b925082614843576148426147ee565b5b828204905092915050565b7f6261636b3a20496e76616c696420646174650000000000000000000000000000600082015250565b6000614884601283613630565b915061488f8261484e565b602082019050919050565b600060208201905081810360008301526148b381614877565b9050919050565b60006040820190506148cf6000830185613b86565b6148dc6020830184613b86565b9392505050565b6000815190506148f281613bf6565b92915050565b60006020828403121561490e5761490d613560565b5b600061491c848285016148e3565b91505092915050565b7f6261636b3a204f7261636c6520726573756c7420616c7265616479207365742060008201527f666f722074686973206d61726b65740000000000000000000000000000000000602082015250565b6000614981602f83613630565b915061498c82614925565b604082019050919050565b600060208201905081810360008301526149b081614974565b9050919050565b60006060820190506149cc6000830186613775565b6149d96020830185613775565b6149e66040830184613890565b949350505050565b60006149f9826136e0565b9150614a04836136e0565b925082821015614a1757614a16614412565b5b828203905092915050565b6000614a2d826136e0565b9150614a38836136e0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614a6d57614a6c614412565b5b828201905092915050565b6000614a83826136e0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614ab557614ab4614412565b5b600182019050919050565b6000819050919050565b6000614ae5614ae0614adb84613a85565b614ac0565b6136e0565b9050919050565b614af581614aca565b82525050565b600060a082019050614b106000830188614aec565b614b1d6020830187613b86565b614b2a6040830186613b86565b614b376060830185613890565b614b446080830184613890565b9695505050505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000614baa602583613630565b9150614bb582614b4e565b604082019050919050565b60006020820190508181036000830152614bd981614b9d565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000614c3c602483613630565b9150614c4782614be0565b604082019050919050565b60006020820190508181036000830152614c6b81614c2f565b9050919050565b600081519050614c81816136ea565b92915050565b600060208284031215614c9d57614c9c613560565b5b6000614cab84828501614c72565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614cea602083613630565b9150614cf582614cb4565b602082019050919050565b60006020820190508181036000830152614d1981614cdd565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000614d56601983613630565b9150614d6182614d20565b602082019050919050565b60006020820190508181036000830152614d8581614d49565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000614de8603283613630565b9150614df382614d8c565b604082019050919050565b60006020820190508181036000830152614e1781614ddb565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000614e54602083613630565b9150614e5f82614e1e565b602082019050919050565b60006020820190508181036000830152614e8381614e47565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000614ec0601c83613630565b9150614ecb82614e8a565b602082019050919050565b60006020820190508181036000830152614eef81614eb3565b9050919050565b614eff816136e0565b82525050565b6000606082019050614f1a6000830186614ef6565b614f276020830185614ef6565b614f346040830184614ef6565b949350505050565b7f5f736574746c653a205061796f75742064617465206e6f742072656163686564600082015250565b6000614f72602083613630565b9150614f7d82614f3c565b602082019050919050565b60006020820190508181036000830152614fa181614f65565b9050919050565b6000614fb3826136e0565b915060008203614fc657614fc5614412565b5b600182039050919050565b6000604082019050614fe66000830185613775565b614ff36020830184613890565b9392505050565b600060608201905061500f6000830186613890565b61501c6020830185613890565b61502960408301846135fb565b949350505050565b600081519050919050565b600082825260208201905092915050565b600061505882615031565b615062818561503c565b9350615072818560208601613641565b61507b81613674565b840191505092915050565b600060808201905061509b6000830187613775565b6150a86020830186613775565b6150b56040830185613890565b81810360608301526150c7818461504d565b905095945050505050565b6000815190506150e181613596565b92915050565b6000602082840312156150fd576150fc613560565b5b600061510b848285016150d2565b9150509291505056fea2646970667358221220fc2b6b4c3ab077980c012de9aad4ebea8966a50650bc67a1cf29f0f0da7ed86764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061021c5760003560e01c806370dea79a11610125578063b18b78dd116100ad578063c96121a81161007c578063c96121a814610668578063e4650fac14610686578063e985e9c5146106b6578063f2fde38b146106e6578063f8897945146107025761021c565b8063b18b78dd146105e2578063b88d4fde14610600578063c34b44a01461061c578063c87b56dd146106385761021c565b80638ac6d217116100f45780638ac6d2171461054e5780638da5cb5b1461056c57806395d89b411461058a578063a22cb465146105a8578063a87d942c146105c45761021c565b806370dea79a146104da578063715018a6146104f85780637df73e271461050257806388bc76ba146105325761021c565b806346e116a6116101a85780636352211e116101775780636352211e1461040b57806363c724f71461043b57806365cacaa4146104575780636b467d151461047557806370a08231146104aa5761021c565b806346e116a6146103715780634b9ba446146103a157806358439479146103bd5780636028421f146103db5761021c565b806312fa3bf1116101ef57806312fa3bf1146102bb578063207b8b53146102eb57806323b872dd1461031b57806325117b721461033757806342842e0e146103555761021c565b806301ffc9a71461022157806306fdde0314610251578063081812fc1461026f578063095ea7b31461029f575b600080fd5b61023b600480360381019061023691906135c2565b610720565b604051610248919061360a565b60405180910390f35b610259610802565b60405161026691906136be565b60405180910390f35b61028960048036038101906102849190613716565b610894565b6040516102969190613784565b60405180910390f35b6102b960048036038101906102b491906137cb565b6108da565b005b6102d560048036038101906102d09190613863565b6109f1565b6040516102e2919061389f565b60405180910390f35b610305600480360381019061030091906138de565b610a34565b604051610312919061389f565b60405180910390f35b61033560048036038101906103309190613994565b610af9565b005b61033f610b59565b60405161034c9190613a03565b60405180910390f35b61036f600480360381019061036a9190613994565b610b81565b005b61038b60048036038101906103869190613a1e565b610ba1565b604051610398919061389f565b60405180910390f35b6103bb60048036038101906103b69190613ac5565b610bb9565b005b6103c5610cff565b6040516103d2919061389f565b60405180910390f35b6103f560048036038101906103f09190613af2565b610d09565b604051610402919061389f565b60405180910390f35b61042560048036038101906104209190613716565b610d21565b6040516104329190613784565b60405180910390f35b61045560048036038101906104509190613b59565b610da7565b005b61045f610e79565b60405161046c9190613784565b60405180910390f35b61048f600480360381019061048a9190613ac5565b610ea1565b6040516104a196959493929190613b95565b60405180910390f35b6104c460048036038101906104bf9190613b59565b610ec8565b6040516104d1919061389f565b60405180910390f35b6104e2610f7f565b6040516104ef919061389f565b60405180910390f35b610500610fa3565b005b61051c60048036038101906105179190613b59565b610fb7565b604051610529919061360a565b60405180910390f35b61054c60048036038101906105479190613863565b610fc9565b005b6105566111f0565b604051610563919061389f565b60405180910390f35b6105746111fa565b6040516105819190613784565b60405180910390f35b610592611223565b60405161059f91906136be565b60405180910390f35b6105c260048036038101906105bd9190613c22565b6112b5565b005b6105cc6112cb565b6040516105d99190613c71565b60405180910390f35b6105ea6112da565b6040516105f79190613784565b60405180910390f35b61061a60048036038101906106159190613dc1565b611302565b005b61063660048036038101906106319190613b59565b611364565b005b610652600480360381019061064d9190613716565b611436565b60405161065f91906136be565b60405180910390f35b61067061145f565b60405161067d919061389f565b60405180910390f35b6106a0600480360381019061069b9190613ac5565b611469565b6040516106ad919061389f565b60405180910390f35b6106d060048036038101906106cb9190613e44565b61147b565b6040516106dd919061360a565b60405180910390f35b61070060048036038101906106fb9190613b59565b61150f565b005b61070a611592565b604051610717919061389f565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806107eb57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806107fb57506107fa826115b6565b5b9050919050565b60606001805461081190613eb3565b80601f016020809104026020016040519081016040528092919081815260200182805461083d90613eb3565b801561088a5780601f1061085f5761010080835404028352916020019161088a565b820191906000526020600020905b81548152906001019060200180831161086d57829003601f168201915b5050505050905090565b600061089f82611620565b6005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108e582610d21565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094c90613f56565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661097461166b565b73ffffffffffffffffffffffffffffffffffffffff1614806109a357506109a28161099d61166b565b61147b565b5b6109e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d990613fe8565b60405180910390fd5b6109ec8383611673565b505050565b6000600a6000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020549050919050565b600080898989888888604051602001610a529695949392919061404a565b60405160208183030381529060405280519060200120905060011515610a78828561172c565b151514610aba576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab190614106565b60405180910390fd5b6000610ac88a8a8a8a6117fa565b905060008111610adb57610ada614126565b5b610ae98a8a8a898986611839565b9250505098975050505050505050565b610b0a610b0461166b565b82611eb1565b610b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b40906141c7565b60405180910390fd5b610b54838383611f46565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610b9c83838360405180602001604052806000815250611302565b505050565b6000610baf8585858561223f565b9050949350505050565b600060088267ffffffffffffffff1681548110610bd957610bd86141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600015158160a00151151514610cf2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce990614262565b60405180910390fd5b610cfb826123b4565b5050565b6000600d54905090565b6000610d17858585856117fa565b9050949350505050565b600080610d2d836125d6565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d95906142ce565b60405180910390fd5b80915050919050565b610daf612613565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1590614360565b60405180910390fd5b6001600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600080600080610eb387612691565b95509550955095509550955091939550919395565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610f38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2f906143f2565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610fab612613565b610fb560006127bc565b565b6000610fc282612880565b9050919050565b600060096000836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561108257602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff168152602001906008019060208260070104928301926001038202915080841161103d5790505b5050505050905060008151905060005b818167ffffffffffffffff1610156111ea576000838267ffffffffffffffff16815181106110c3576110c26141e7565b5b60200260200101519050600060088267ffffffffffffffff16815481106110ed576110ec6141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050600015158160a001511515036111d5576111d4826123b4565b5b505080806111e290614441565b915050611092565b50505050565b6000600e54905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606002805461123290613eb3565b80601f016020809104026020016040519081016040528092919081815260200182805461125e90613eb3565b80156112ab5780601f10611280576101008083540402835291602001916112ab565b820191906000526020600020905b81548152906001019060200180831161128e57829003601f168201915b5050505050905090565b6112c76112c061166b565b83836128d6565b5050565b60006112d5612a42565b905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b61131361130d61166b565b83611eb1565b611352576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611349906141c7565b60405180910390fd5b61135e84848484612a4f565b50505050565b61136c612613565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036113db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113d2906144e3565b60405180910390fd5b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b606081604051602001611449919061455a565b6040516020818303038152906040529050919050565b6000600754905090565b600061147482612aab565b9050919050565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b611517612613565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611586576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157d906145f2565b60405180910390fd5b61158f816127bc565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61162981612b0f565b611668576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161165f906142ce565b60405180910390fd5b50565b600033905090565b816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166116e683610d21565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008073__$47464c6f7588c8075b5d384b19d082a8ec$__635cff288d85856040518363ffffffff1660e01b8152600401611768929190614729565b602060405180830381865af4158015611785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a99190614767565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036117e8576117e7614126565b5b6117f181612880565b91505092915050565b6000806118098484888861223f565b905061182e84620f4240868461181f9190614794565b611829919061481d565b612b50565b915050949350505050565b6000428311801561184957504284115b611888576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161187f9061489a565b60405180910390fd5b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306c77ce7888a6040518363ffffffff1660e01b81526004016118e79291906148ba565b602060405180830381865afa158015611904573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192891906148f8565b15151461196a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196190614997565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fb9190614767565b90508073ffffffffffffffffffffffffffffffffffffffff166323b872dd611a2161166b565b7f0000000000000000000000000000000000000000000000000000000000000000896040518463ffffffff1660e01b8152600401611a61939291906149b7565b6020604051808303816000875af1158015611a80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa491906148f8565b508073ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008987611b0f91906149ee565b6040518463ffffffff1660e01b8152600401611b2d939291906149b7565b6020604051808303816000875af1158015611b4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7091906148f8565b5085600a6000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000828254611bba9190614a22565b9250508190555082600c60008a6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000206000828254611c0a9190614a22565b925050819055506000611c1b612a42565b905060086040518060c001604052808b6fffffffffffffffffffffffffffffffff191681526020018a6fffffffffffffffffffffffffffffffff1916815260200189815260200186815260200187815260200160001515815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff021916908360801c021790555060408201518160010155606082015181600201556080820151816003015560a08201518160040160006101000a81548160ff021916908315150217905550505060096000896fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600491828204019190066008029091909190916101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550611de6611dd661166b565b8267ffffffffffffffff16612b69565b86600d6000828254611df89190614a22565b925050819055508684611e0b91906149ee565b600e6000828254611e1c9190614a22565b9250508190555060076000815480929190611e3690614a78565b9190505550611e4361166b565b73ffffffffffffffffffffffffffffffffffffffff167f1d273ea6a1aea94de32fd06a09ab8046dff8e3261c5a4ecaa5e1a5705f3342ec828b8b8b89604051611e90959493929190614afb565b60405180910390a28067ffffffffffffffff16925050509695505050505050565b600080611ebd83610d21565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611eff5750611efe818561147b565b5b80611f3d57508373ffffffffffffffffffffffffffffffffffffffff16611f2584610894565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611f6682610d21565b73ffffffffffffffffffffffffffffffffffffffff1614611fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb390614bc0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361202b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202290614c52565b60405180910390fd5b6120388383836001612d86565b8273ffffffffffffffffffffffffffffffffffffffff1661205882610d21565b73ffffffffffffffffffffffffffffffffffffffff16146120ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a590614bc0565b60405180910390fd5b6005600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461223a8383836001612eac565b505050565b6000600185111580612252575060018411155b1561226057600190506123ac565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b15031fa6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f19190614c87565b9050600081036123055760019150506123ac565b80600c6000866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020019081526020016000205411156123505760019150506123ac565b600c6000856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff19168152602001908152602001600020548161239591906149ee565b905060006123a4878784612eb2565b905080925050505b949350505050565b600160088267ffffffffffffffff16815481106123d4576123d36141e7565b5b906000526020600020906005020160040160006101000a81548160ff02191690831515021790555061240581612aab565b421115612426576124218167ffffffffffffffff166001612f39565b6125d3565b600060088267ffffffffffffffff1681548110612446576124456141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff161515151581525050905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166306c77ce7836020015184600001516040518363ffffffff1660e01b81526004016125799291906148ba565b602060405180830381865afa158015612596573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ba91906148f8565b90506125d08367ffffffffffffffff1682612f39565b50505b50565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b61261b61166b565b73ffffffffffffffffffffffffffffffffffffffff166126396111fa565b73ffffffffffffffffffffffffffffffffffffffff161461268f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268690614d00565b60405180910390fd5b565b600080600080600080600060088867ffffffffffffffff16815481106126ba576126b96141e7565b5b90600052602060002090600502016040518060c00160405290816000820160009054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016000820160109054906101000a900460801b6fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff191681526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff16151515158152505090508060400151816060015182608001518360a00151846020015185600001519650965096509650965096505091939550919395565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612944576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293b90614d6c565b60405180910390fd5b80600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051612a35919061360a565b60405180910390a3505050565b6000600880549050905090565b612a5a848484611f46565b612a668484848461325e565b612aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9c90614dfe565b60405180910390fd5b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000060088367ffffffffffffffff1681548110612aec57612aeb6141e7565b5b906000526020600020906005020160030154612b089190614a22565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff16612b31836125d6565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b6000818311612b5f5781612b61565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612bd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bcf90614e6a565b60405180910390fd5b612be181612b0f565b15612c21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1890614ed6565b60405180910390fd5b612c2f600083836001612d86565b612c3881612b0f565b15612c78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6f90614ed6565b60405180910390fd5b6001600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612d82600083836001612eac565b5050565b6001811115612ea657600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614612e1a5780600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e1291906149ee565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614612ea55780600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612e9d9190614a22565b925050819055505b5b50505050565b50505050565b600073__$488e0037c7b108d422da68056570fe35d6$",
  "libraries": {
    "SignatureLib": "0x2686e2ec431b90b5c5b21408771ebf377dbb07bd",
    "OddsLib": "0x1C3A4A0FACbdC8237469C312E3B121E8A97864c0"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2722,
        "contract": "contracts/Market.sol:Market",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5038,
        "contract": "contracts/Market.sol:Market",
        "label": "_name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5040,
        "contract": "contracts/Market.sol:Market",
        "label": "_symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 5044,
        "contract": "contracts/Market.sol:Market",
        "label": "_owners",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5048,
        "contract": "contracts/Market.sol:Market",
        "label": "_balances",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5052,
        "contract": "contracts/Market.sol:Market",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5058,
        "contract": "contracts/Market.sol:Market",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11817,
        "contract": "contracts/Market.sol:Market",
        "label": "_inplayCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11821,
        "contract": "contracts/Market.sol:Market",
        "label": "_bets",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_struct(Bet)11799_storage)dyn_storage"
      },
      {
        "astId": 11826,
        "contract": "contracts/Market.sol:Market",
        "label": "_marketBets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes16,t_array(t_uint64)dyn_storage)"
      },
      {
        "astId": 11830,
        "contract": "contracts/Market.sol:Market",
        "label": "_marketTotal",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes16,t_uint256)"
      },
      {
        "astId": 11836,
        "contract": "contracts/Market.sol:Market",
        "label": "_marketBetAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes16,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 11840,
        "contract": "contracts/Market.sol:Market",
        "label": "_potentialPayout",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes16,t_uint256)"
      },
      {
        "astId": 11842,
        "contract": "contracts/Market.sol:Market",
        "label": "_totalInPlay",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11844,
        "contract": "contracts/Market.sol:Market",
        "label": "_totalExposure",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 11852,
        "contract": "contracts/Market.sol:Market",
        "label": "_signers",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bet)11799_storage)dyn_storage": {
        "base": "t_struct(Bet)11799_storage",
        "encoding": "dynamic_array",
        "label": "struct Bet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes16,t_array(t_uint64)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => uint64[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint64)dyn_storage"
      },
      "t_mapping(t_bytes16,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_bytes16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Bet)11799_storage": {
        "encoding": "inplace",
        "label": "struct Bet",
        "members": [
          {
            "astId": 11788,
            "contract": "contracts/Market.sol:Market",
            "label": "propositionId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes16"
          },
          {
            "astId": 11790,
            "contract": "contracts/Market.sol:Market",
            "label": "marketId",
            "offset": 16,
            "slot": "0",
            "type": "t_bytes16"
          },
          {
            "astId": 11792,
            "contract": "contracts/Market.sol:Market",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11794,
            "contract": "contracts/Market.sol:Market",
            "label": "payout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11796,
            "contract": "contracts/Market.sol:Market",
            "label": "payoutDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 11798,
            "contract": "contracts/Market.sol:Market",
            "label": "settled",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}