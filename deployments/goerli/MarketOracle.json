{
  "address": "0x2473f4FCc2512617a6b247DDB57485CDeDaAf8f6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        }
      ],
      "name": "ResultSet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        }
      ],
      "name": "checkResult",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        }
      ],
      "name": "getResult",
      "outputs": [
        {
          "internalType": "bytes16",
          "name": "",
          "type": "bytes16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureLib.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "setResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdfdd3d90c2f8eeb18237067891c12d8094c3851058ac49d1f7d9c9a2e5dc6309",
  "receipt": {
    "to": null,
    "from": "0x1Ab4C6d9e25Fc65C917aFBEfB4E963C400Fb9814",
    "contractAddress": "0x2473f4FCc2512617a6b247DDB57485CDeDaAf8f6",
    "transactionIndex": 48,
    "gasUsed": "721325",
    "logsBloom": "0x
    "blockHash": "0x64f837ca98f74699b57bc86061af176b556e6c472fe48c9651f6d0b478e7f5cc",
    "transactionHash": "0xdfdd3d90c2f8eeb18237067891c12d8094c3851058ac49d1f7d9c9a2e5dc6309",
    "logs": [],
    "blockNumber": 8125148,
    "cumulativeGasUsed": "9777803",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "271361eb13ce4f1fafa2d842780ccd55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"}],\"name\":\"ResultSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"}],\"name\":\"checkResult\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"}],\"name\":\"getResult\",\"outputs\":[{\"internalType\":\"bytes16\",\"name\":\"\",\"type\":\"bytes16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureLib.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketOracle.sol\":\"MarketOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./SignatureLib.sol\\\";\\n\\n// Binary Oracle\\ninterface IOracle {\\n    function checkResult(\\n        bytes16 marketId,\\n        bytes16 propositionId\\n    ) external view returns (bool);\\n\\n    function getResult(bytes16 marketId) external view returns (bytes16);\\n\\n    function setResult(\\n        bytes16 marketId,\\n        bytes16 propositionId,\\n        SignatureLib.Signature calldata signature\\n    ) external;\\n\\n    event ResultSet(bytes16 indexed marketId, bytes16 indexed propositionId);\\n}\",\"keccak256\":\"0xfeca1e8a72e0b4d54a08df6f2446e58e0ce3a83d94aeb48b67c4ac3b1df8f9f4\",\"license\":\"MIT\"},\"contracts/MarketOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./SignatureLib.sol\\\";\\n\\ncontract MarketOracle is IOracle {\\n    mapping(bytes16 => bytes16) private _results;\\n    address private immutable _owner;\\n\\n    constructor() {\\n        _owner = msg.sender;\\n    }\\n\\n    function checkResult(\\n        bytes16 marketId,\\n        bytes16 propositionId\\n    ) external view returns (bool) {\\n        require(\\n            propositionId != bytes16(0),\\n            \\\"getBinaryResult: Invalid propositionId\\\"\\n        );\\n        return _results[marketId] == propositionId;\\n    }\\n\\n    function getResult(bytes16 marketId) external view returns (bytes16) {\\n        require(\\n            marketId != bytes16(0),\\n            \\\"getBinaryResult: Invalid propositionId\\\"\\n        );\\n        return _results[marketId];\\n    }\\n\\n    function setResult(\\n        bytes16 marketId,\\n        bytes16 propositionId,\\n        SignatureLib.Signature calldata signature\\n    ) external {\\n        bytes32 messageHash = keccak256(abi.encode(marketId, propositionId));\\n        require(isValidSignature(messageHash, signature), \\\"setBinaryResult: Invalid signature\\\");\\n        require(\\n            propositionId != bytes16(0),\\n            \\\"setBinaryResult: Invalid propositionId\\\"\\n        );\\n        require(\\n            _results[marketId] == bytes16(0),\\n            \\\"setBinaryResult: Result already set\\\"\\n        );\\n        _results[marketId] = propositionId;\\n\\n        emit ResultSet(marketId, propositionId);\\n    }\\n\\n    function isValidSignature(bytes32 messageHash, SignatureLib.Signature calldata signature) private view returns (bool) {\\n\\t\\taddress signer = SignatureLib.recoverSigner(messageHash, signature);\\n\\t\\tassert(signer != address(0));\\n\\t\\treturn signer == _owner;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb8061969e8a99869b56c3262b05ed79ce4460d08d44f8a715841b227a3ae37a3\",\"license\":\"MIT\"},\"contracts/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nlibrary SignatureLib {\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        bytes32 prefixedHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\n        );\\n        return ecrecover(prefixedHash, signature.v, signature.r, signature.s);\\n    }\\n}\\n\",\"keccak256\":\"0x030d6d33efc780f65e027c212235482f115a3f91f04195ebf5543c6b984ea3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050608051610c24610060600039600061056e0152610c246000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306c77ce7146100465780634b51e70a146100765780639a56d919146100a6575b600080fd5b610060600480360381019061005b9190610621565b6100c2565b60405161006d919061067c565b60405180910390f35b610090600480360381019061008b9190610697565b6101a6565b60405161009d91906106d3565b60405180910390f35b6100c060048036038101906100bb9190610712565b610261565b005b60008060801b6fffffffffffffffffffffffffffffffff1916826fffffffffffffffffffffffffffffffff19161415610130576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610127906107e8565b60405180910390fd5b816fffffffffffffffffffffffffffffffff1916600080856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460801b6fffffffffffffffffffffffffffffffff191614905092915050565b60008060801b6fffffffffffffffffffffffffffffffff1916826fffffffffffffffffffffffffffffffff19161415610214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020b906107e8565b60405180910390fd5b600080836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460801b9050919050565b60008383604051602001610276929190610808565b60405160208183030381529060405280519060200120905061029881836104af565b6102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce906108a3565b60405180910390fd5b600060801b6fffffffffffffffffffffffffffffffff1916836fffffffffffffffffffffffffffffffff19161415610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033b90610935565b60405180910390fd5b600060801b6fffffffffffffffffffffffffffffffff1916600080866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460801b6fffffffffffffffffffffffffffffffff1916146103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec906109c7565b60405180910390fd5b82600080866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550826fffffffffffffffffffffffffffffffff1916846fffffffffffffffffffffffffffffffff19167f1a26e02557415617cb31ed9c9ac1bbe2c8f5e32b8f13ddc706d9ad0afb3c2b4460405160405180910390a350505050565b60008073839ED5A99c6ec4d1B852a2550cCF98247d27B499635cff288d85856040518363ffffffff1660e01b81526004016104eb929190610b0b565b602060405180830381865af4158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610b92565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561056c5761056b610bbf565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161491505092915050565b600080fd5b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6105fe816105c9565b811461060957600080fd5b50565b60008135905061061b816105f5565b92915050565b60008060408385031215610638576106376105c4565b5b60006106468582860161060c565b92505060206106578582860161060c565b9150509250929050565b60008115159050919050565b61067681610661565b82525050565b6000602082019050610691600083018461066d565b92915050565b6000602082840312156106ad576106ac6105c4565b5b60006106bb8482850161060c565b91505092915050565b6106cd816105c9565b82525050565b60006020820190506106e860008301846106c4565b92915050565b600080fd5b600060608284031215610709576107086106ee565b5b81905092915050565b600080600060a0848603121561072b5761072a6105c4565b5b60006107398682870161060c565b935050602061074a8682870161060c565b925050604061075b868287016106f3565b9150509250925092565b600082825260208201905092915050565b7f67657442696e617279526573756c743a20496e76616c69642070726f706f736960008201527f74696f6e49640000000000000000000000000000000000000000000000000000602082015250565b60006107d2602683610765565b91506107dd82610776565b604082019050919050565b60006020820190508181036000830152610801816107c5565b9050919050565b600060408201905061081d60008301856106c4565b61082a60208301846106c4565b9392505050565b7f73657442696e617279526573756c743a20496e76616c6964207369676e61747560008201527f7265000000000000000000000000000000000000000000000000000000000000602082015250565b600061088d602283610765565b915061089882610831565b604082019050919050565b600060208201905081810360008301526108bc81610880565b9050919050565b7f73657442696e617279526573756c743a20496e76616c69642070726f706f736960008201527f74696f6e49640000000000000000000000000000000000000000000000000000602082015250565b600061091f602683610765565b915061092a826108c3565b604082019050919050565b6000602082019050818103600083015261094e81610912565b9050919050565b7f73657442696e617279526573756c743a20526573756c7420616c72656164792060008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006109b1602383610765565b91506109bc82610955565b604082019050919050565b600060208201905081810360008301526109e0816109a4565b9050919050565b6000819050919050565b6109fa816109e7565b82525050565b600060ff82169050919050565b610a1681610a00565b8114610a2157600080fd5b50565b600081359050610a3381610a0d565b92915050565b6000610a486020840184610a24565b905092915050565b610a5981610a00565b82525050565b610a68816109e7565b8114610a7357600080fd5b50565b600081359050610a8581610a5f565b92915050565b6000610a9a6020840184610a76565b905092915050565b610aab816109e7565b82525050565b60608201610ac26000830183610a39565b610acf6000850182610a50565b50610add6020830183610a8b565b610aea6020850182610aa2565b50610af86040830183610a8b565b610b056040850182610aa2565b50505050565b6000608082019050610b2060008301856109f1565b610b2d6020830184610ab1565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5f82610b34565b9050919050565b610b6f81610b54565b8114610b7a57600080fd5b50565b600081519050610b8c81610b66565b92915050565b600060208284031215610ba857610ba76105c4565b5b6000610bb684828501610b7d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212205b125585d533618298db388b5bc685de75843fded1b73ba43effdd093ecff72864736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806306c77ce7146100465780634b51e70a146100765780639a56d919146100a6575b600080fd5b610060600480360381019061005b9190610621565b6100c2565b60405161006d919061067c565b60405180910390f35b610090600480360381019061008b9190610697565b6101a6565b60405161009d91906106d3565b60405180910390f35b6100c060048036038101906100bb9190610712565b610261565b005b60008060801b6fffffffffffffffffffffffffffffffff1916826fffffffffffffffffffffffffffffffff19161415610130576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610127906107e8565b60405180910390fd5b816fffffffffffffffffffffffffffffffff1916600080856fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460801b6fffffffffffffffffffffffffffffffff191614905092915050565b60008060801b6fffffffffffffffffffffffffffffffff1916826fffffffffffffffffffffffffffffffff19161415610214576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020b906107e8565b60405180910390fd5b600080836fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460801b9050919050565b60008383604051602001610276929190610808565b60405160208183030381529060405280519060200120905061029881836104af565b6102d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ce906108a3565b60405180910390fd5b600060801b6fffffffffffffffffffffffffffffffff1916836fffffffffffffffffffffffffffffffff19161415610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033b90610935565b60405180910390fd5b600060801b6fffffffffffffffffffffffffffffffff1916600080866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460801b6fffffffffffffffffffffffffffffffff1916146103f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ec906109c7565b60405180910390fd5b82600080866fffffffffffffffffffffffffffffffff19166fffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff021916908360801c0217905550826fffffffffffffffffffffffffffffffff1916846fffffffffffffffffffffffffffffffff19167f1a26e02557415617cb31ed9c9ac1bbe2c8f5e32b8f13ddc706d9ad0afb3c2b4460405160405180910390a350505050565b60008073__$47464c6f7588c8075b5d384b19d082a8ec$__635cff288d85856040518363ffffffff1660e01b81526004016104eb929190610b0b565b602060405180830381865af4158015610508573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061052c9190610b92565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561056c5761056b610bbf565b5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161491505092915050565b600080fd5b60007fffffffffffffffffffffffffffffffff0000000000000000000000000000000082169050919050565b6105fe816105c9565b811461060957600080fd5b50565b60008135905061061b816105f5565b92915050565b60008060408385031215610638576106376105c4565b5b60006106468582860161060c565b92505060206106578582860161060c565b9150509250929050565b60008115159050919050565b61067681610661565b82525050565b6000602082019050610691600083018461066d565b92915050565b6000602082840312156106ad576106ac6105c4565b5b60006106bb8482850161060c565b91505092915050565b6106cd816105c9565b82525050565b60006020820190506106e860008301846106c4565b92915050565b600080fd5b600060608284031215610709576107086106ee565b5b81905092915050565b600080600060a0848603121561072b5761072a6105c4565b5b60006107398682870161060c565b935050602061074a8682870161060c565b925050604061075b868287016106f3565b9150509250925092565b600082825260208201905092915050565b7f67657442696e617279526573756c743a20496e76616c69642070726f706f736960008201527f74696f6e49640000000000000000000000000000000000000000000000000000602082015250565b60006107d2602683610765565b91506107dd82610776565b604082019050919050565b60006020820190508181036000830152610801816107c5565b9050919050565b600060408201905061081d60008301856106c4565b61082a60208301846106c4565b9392505050565b7f73657442696e617279526573756c743a20496e76616c6964207369676e61747560008201527f7265000000000000000000000000000000000000000000000000000000000000602082015250565b600061088d602283610765565b915061089882610831565b604082019050919050565b600060208201905081810360008301526108bc81610880565b9050919050565b7f73657442696e617279526573756c743a20496e76616c69642070726f706f736960008201527f74696f6e49640000000000000000000000000000000000000000000000000000602082015250565b600061091f602683610765565b915061092a826108c3565b604082019050919050565b6000602082019050818103600083015261094e81610912565b9050919050565b7f73657442696e617279526573756c743a20526573756c7420616c72656164792060008201527f7365740000000000000000000000000000000000000000000000000000000000602082015250565b60006109b1602383610765565b91506109bc82610955565b604082019050919050565b600060208201905081810360008301526109e0816109a4565b9050919050565b6000819050919050565b6109fa816109e7565b82525050565b600060ff82169050919050565b610a1681610a00565b8114610a2157600080fd5b50565b600081359050610a3381610a0d565b92915050565b6000610a486020840184610a24565b905092915050565b610a5981610a00565b82525050565b610a68816109e7565b8114610a7357600080fd5b50565b600081359050610a8581610a5f565b92915050565b6000610a9a6020840184610a76565b905092915050565b610aab816109e7565b82525050565b60608201610ac26000830183610a39565b610acf6000850182610a50565b50610add6020830183610a8b565b610aea6020850182610aa2565b50610af86040830183610a8b565b610b056040850182610aa2565b50505050565b6000608082019050610b2060008301856109f1565b610b2d6020830184610ab1565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5f82610b34565b9050919050565b610b6f81610b54565b8114610b7a57600080fd5b50565b600081519050610b8c81610b66565b92915050565b600060208284031215610ba857610ba76105c4565b5b6000610bb684828501610b7d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea26469706673582212205b125585d533618298db388b5bc685de75843fded1b73ba43effdd093ecff72864736f6c634300080a0033",
  "libraries": {
    "SignatureLib": "0x839ED5A99c6ec4d1B852a2550cCF98247d27B499"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9479,
        "contract": "contracts/MarketOracle.sol:MarketOracle",
        "label": "_results",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes16,t_bytes16)"
      }
    ],
    "types": {
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_mapping(t_bytes16,t_bytes16)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => bytes16)",
        "numberOfBytes": "32",
        "value": "t_bytes16"
      }
    }
  }
}