{
  "address": "0x53FA3dA890d97B694d144A66AfA772A42F69CE1a",
  "abi": [
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        }
      ],
      "name": "addMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetMargin",
          "type": "uint256"
        }
      ],
      "name": "changeMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getCurvedAdjustedOdds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "getLinearAdjustedOdds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "odds",
          "type": "uint256[]"
        }
      ],
      "name": "getMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scratchedOdds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetMargin",
          "type": "uint256"
        }
      ],
      "name": "rebaseOddsWithScratch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "margin",
          "type": "uint256"
        }
      ],
      "name": "removeMargin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xef65395bdeede933539570496f88090718bce3393fd7e4791dacdad02eb40ccf",
  "receipt": {
    "to": null,
    "from": "0x1Ab4C6d9e25Fc65C917aFBEfB4E963C400Fb9814",
    "contractAddress": "0x53FA3dA890d97B694d144A66AfA772A42F69CE1a",
    "transactionIndex": 30,
    "gasUsed": "535996",
    "logsBloom": "0x
    "blockHash": "0xb759c359f2562db565d63493c29068a0eb837db27e7fc365de405bc04376f7af",
    "transactionHash": "0xef65395bdeede933539570496f88090718bce3393fd7e4791dacdad02eb40ccf",
    "logs": [],
    "blockNumber": 8702206,
    "cumulativeGasUsed": "3225110",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ed5032941ea139426309977127f188cb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"addMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMargin\",\"type\":\"uint256\"}],\"name\":\"changeMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getCurvedAdjustedOdds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"getLinearAdjustedOdds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"odds\",\"type\":\"uint256[]\"}],\"name\":\"getMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scratchedOdds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetMargin\",\"type\":\"uint256\"}],\"name\":\"rebaseOddsWithScratch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"margin\",\"type\":\"uint256\"}],\"name\":\"removeMargin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OddsLib.sol\":\"OddsLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/OddsLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nlibrary OddsLib {\\n    // Precision to be used in calculations\\n    uint256 public constant PRECISION = 1e6;\\n\\n    /*\\n        * @dev Adjust the odds downwards linearly to 1\\n        * @param wager The amount wagered\\n        * @param pool The total amount in the pool\\n        * @return The adjusted decimal odds given\\n    */\\n    function getLinearAdjustedOdds(\\n        uint256 wager,\\n        uint256 odds,\\n        uint256 liquidity\\n    ) external pure returns (uint256) {\\n        assert(odds >= 1 * PRECISION);\\n        uint256 unadjustedPayout = odds * wager / PRECISION;\\n        \\n        // odds * unadjustedPayout / (liquidity + wager)\\n\\t\\tuint256 oddsAdjustment = Math.mulDiv(odds, unadjustedPayout, liquidity + wager, Math.Rounding.Down);\\n        // If we have gone past the floor, clip to 1\\n        if (oddsAdjustment > odds) {\\n            return 1 * PRECISION;\\n        }\\n        return Math.max(1 * PRECISION, odds - oddsAdjustment);\\n    }\\n\\n    /*\\n        * @dev Reduces odds on a curve that approaches 0 as the payout increases, such that the payout will always be less then free liquidity. Increase the coefficient to make the curve steeper. 2 is a good starting point.\\n        * @param wager The amount of the wager\\n        * @param odds The decimals odds of the wager, expressed as a number\\n        * @return The new adjusted decimal odds\\n    */\\n    function getCurvedAdjustedOdds(\\n        uint256 wager,\\n        uint256 odds,\\n        uint256 liquidity\\n    ) external pure returns (uint256) {\\n        assert(odds >= 1 * PRECISION);\\n        uint256 SQRT_PRECISION = 1e3;\\n        uint256 potentialPayout = (wager * odds / PRECISION);\\n        uint256 adjustedPayout = (liquidity + wager) -\\n            (liquidity * SQRT_PRECISION) /\\n            Math.sqrt(\\n                2 * (potentialPayout * PRECISION) / liquidity + (1 * PRECISION),\\n                Math.Rounding.Up\\n            );\\n        // Return the odds need to generate this adjusted payout with the given wager\\n        return Math.max(1 * PRECISION, (adjustedPayout * PRECISION) / wager);\\n    }\\n\\n    // Assuming that the market previously had targetMargin, then after some runners have been scratched, correct the odds of this runner to make up the margin again\\n    function rebaseOddsWithScratch(uint256 odds, uint256 scratchedOdds, uint256 targetMargin) external pure returns (uint256) {\\n        assert(odds > 0);\\n        uint256 newMargin = targetMargin - PRECISION / scratchedOdds;\\n        return changeMargin(odds, newMargin, targetMargin);\\n    } \\n\\n    function changeMargin(uint256 odds, uint256 margin, uint256 targetMargin) public pure returns (uint256) {\\n        return addMargin(removeMargin(odds, margin), targetMargin);\\n    }\\n\\n    function removeMargin(uint256 odds, uint256 margin) public pure returns (uint256) {\\n        return odds * margin / PRECISION;\\n    }\\n\\n    function addMargin(uint256 odds, uint256 margin) public pure returns (uint256) {\\n        assert(margin > 0);\\n        return odds * PRECISION / margin;\\n    }\\n\\n    // Given an array of odds, return the margin\\n    function getMargin(uint256[] calldata odds) public pure returns (uint256) {\\n        uint256 total; // 0\\n        uint256 oddsCount = odds.length;\\n        for (uint256 i = 0; i < oddsCount; i++) {\\n            if (odds[i] == 0) continue;\\n            total += ((PRECISION * PRECISION) / odds[i]);\\n        }\\n        return total;\\n    }\\n}\",\"keccak256\":\"0x83508dd30664d07c984ef69dcf1ea0618137c04e59237996e56ca9c98265a59f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6108bb61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c8063a2bc05c911610065578063a2bc05c9146100f5578063aaf5eb6814610108578063d41194b814610112578063f0d3bbca1461012557600080fd5b80634b8f4381146100975780636a747622146100bc5780639c90641f146100cf578063a19dec43146100e2575b600080fd5b6100aa6100a53660046106cb565b610138565b60405190815260200160405180910390f35b6100aa6100ca3660046106ed565b610159565b6100aa6100dd366004610762565b6101e3565b6100aa6100f0366004610762565b6102cb565b6100aa610103366004610762565b610364565b6100aa620f424081565b6100aa6101203660046106cb565b610381565b6100aa610133366004610762565b6103a0565b6000620f424061014883856107a4565b61015291906107d9565b9392505050565b60008082815b818110156101d957858582818110610179576101796107fb565b90506020020135600003156101c75785858281811061019a5761019a6107fb565b90506020020135620f4240806101b091906107a4565b6101ba91906107d9565b6101c49084610811565b92505b806101d181610829565b91505061015f565b5090949350505050565b60006101f3620f424060016107a4565b83101561020257610202610842565b6103e86000620f424061021586886107a4565b61021f91906107d9565b90506000610268610234620f424060016107a4565b86610242620f4240866107a4565b61024d9060026107a4565b61025791906107d9565b6102619190610811565b60016103e0565b61027284876107a4565b61027c91906107d9565b6102868887610811565b6102909190610858565b90506102c06102a3620f424060016107a4565b886102b1620f4240856107a4565b6102bb91906107d9565b610429565b979650505050505050565b60006102db620f424060016107a4565b8310156102ea576102ea610842565b6000620f42406102fa86866107a4565b61030491906107d9565b9050600061031e85836103178988610811565b600061043f565b90508481111561033f57610336620f424060016107a4565b92505050610152565b61035a610350620f424060016107a4565b6102bb8388610858565b9695505050505050565b60006103796103738585610138565b83610381565b949350505050565b600080821161039257610392610842565b81610148620f4240856107a4565b60008084116103b1576103b1610842565b60006103c084620f42406107d9565b6103ca9084610858565b90506103d7858285610364565b95945050505050565b6000806103ec84610490565b905060018360028111156104025761040261086f565b148015610410575083818202105b61041b57600061041e565b60015b60ff16019392505050565b60008183116104385781610152565b5090919050565b60008061044d868686610578565b905060018360028111156104635761046361086f565b14801561048057506000848061047b5761047b6107c3565b868809115b156103d75761035a600182610811565b6000816000036104a257506000919050565b600060016104af84610627565b901c6001901b905060018184816104c8576104c86107c3565b048201901c905060018184816104e0576104e06107c3565b048201901c905060018184816104f8576104f86107c3565b048201901c90506001818481610510576105106107c3565b048201901c90506001818481610528576105286107c3565b048201901c90506001818481610540576105406107c3565b048201901c90506001818481610558576105586107c3565b048201901c905061015281828581610572576105726107c3565b046106bc565b60008080600019858709858702925082811083820303915050806000036105b2578382816105a8576105a86107c3565b0492505050610152565b8084116105be57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080608083901c1561063c57608092831c92015b604083901c1561064e57604092831c92015b602083901c1561066057602092831c92015b601083901c1561067257601092831c92015b600883901c1561068457600892831c92015b600483901c1561069657600492831c92015b600283901c156106a857600292831c92015b600183901c156106b6576001015b92915050565b60008183106104385781610152565b600080604083850312156106de57600080fd5b50508035926020909101359150565b6000806020838503121561070057600080fd5b823567ffffffffffffffff8082111561071857600080fd5b818501915085601f83011261072c57600080fd5b81358181111561073b57600080fd5b8660208260051b850101111561075057600080fd5b60209290920196919550909350505050565b60008060006060848603121561077757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156107be576107be61078e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826107f657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082198211156108245761082461078e565b500190565b60006001820161083b5761083b61078e565b5060010190565b634e487b7160e01b600052600160045260246000fd5b60008282101561086a5761086a61078e565b500390565b634e487b7160e01b600052602160045260246000fdfea26469706673582212209fc692859b762cd6899343de62d48268172128b09ab19c25267cb7aa10745ceb64736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100925760003560e01c8063a2bc05c911610065578063a2bc05c9146100f5578063aaf5eb6814610108578063d41194b814610112578063f0d3bbca1461012557600080fd5b80634b8f4381146100975780636a747622146100bc5780639c90641f146100cf578063a19dec43146100e2575b600080fd5b6100aa6100a53660046106cb565b610138565b60405190815260200160405180910390f35b6100aa6100ca3660046106ed565b610159565b6100aa6100dd366004610762565b6101e3565b6100aa6100f0366004610762565b6102cb565b6100aa610103366004610762565b610364565b6100aa620f424081565b6100aa6101203660046106cb565b610381565b6100aa610133366004610762565b6103a0565b6000620f424061014883856107a4565b61015291906107d9565b9392505050565b60008082815b818110156101d957858582818110610179576101796107fb565b90506020020135600003156101c75785858281811061019a5761019a6107fb565b90506020020135620f4240806101b091906107a4565b6101ba91906107d9565b6101c49084610811565b92505b806101d181610829565b91505061015f565b5090949350505050565b60006101f3620f424060016107a4565b83101561020257610202610842565b6103e86000620f424061021586886107a4565b61021f91906107d9565b90506000610268610234620f424060016107a4565b86610242620f4240866107a4565b61024d9060026107a4565b61025791906107d9565b6102619190610811565b60016103e0565b61027284876107a4565b61027c91906107d9565b6102868887610811565b6102909190610858565b90506102c06102a3620f424060016107a4565b886102b1620f4240856107a4565b6102bb91906107d9565b610429565b979650505050505050565b60006102db620f424060016107a4565b8310156102ea576102ea610842565b6000620f42406102fa86866107a4565b61030491906107d9565b9050600061031e85836103178988610811565b600061043f565b90508481111561033f57610336620f424060016107a4565b92505050610152565b61035a610350620f424060016107a4565b6102bb8388610858565b9695505050505050565b60006103796103738585610138565b83610381565b949350505050565b600080821161039257610392610842565b81610148620f4240856107a4565b60008084116103b1576103b1610842565b60006103c084620f42406107d9565b6103ca9084610858565b90506103d7858285610364565b95945050505050565b6000806103ec84610490565b905060018360028111156104025761040261086f565b148015610410575083818202105b61041b57600061041e565b60015b60ff16019392505050565b60008183116104385781610152565b5090919050565b60008061044d868686610578565b905060018360028111156104635761046361086f565b14801561048057506000848061047b5761047b6107c3565b868809115b156103d75761035a600182610811565b6000816000036104a257506000919050565b600060016104af84610627565b901c6001901b905060018184816104c8576104c86107c3565b048201901c905060018184816104e0576104e06107c3565b048201901c905060018184816104f8576104f86107c3565b048201901c90506001818481610510576105106107c3565b048201901c90506001818481610528576105286107c3565b048201901c90506001818481610540576105406107c3565b048201901c90506001818481610558576105586107c3565b048201901c905061015281828581610572576105726107c3565b046106bc565b60008080600019858709858702925082811083820303915050806000036105b2578382816105a8576105a86107c3565b0492505050610152565b8084116105be57600080fd5b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b600080608083901c1561063c57608092831c92015b604083901c1561064e57604092831c92015b602083901c1561066057602092831c92015b601083901c1561067257601092831c92015b600883901c1561068457600892831c92015b600483901c1561069657600492831c92015b600283901c156106a857600292831c92015b600183901c156106b6576001015b92915050565b60008183106104385781610152565b600080604083850312156106de57600080fd5b50508035926020909101359150565b6000806020838503121561070057600080fd5b823567ffffffffffffffff8082111561071857600080fd5b818501915085601f83011261072c57600080fd5b81358181111561073b57600080fd5b8660208260051b850101111561075057600080fd5b60209290920196919550909350505050565b60008060006060848603121561077757600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b60008160001904831182151516156107be576107be61078e565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826107f657634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600082198211156108245761082461078e565b500190565b60006001820161083b5761083b61078e565b5060010190565b634e487b7160e01b600052600160045260246000fd5b60008282101561086a5761086a61078e565b500390565b634e487b7160e01b600052602160045260246000fdfea26469706673582212209fc692859b762cd6899343de62d48268172128b09ab19c25267cb7aa10745ceb64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}