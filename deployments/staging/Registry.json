{
  "address": "0x3F8B30E5784Efc8c5ccC963eB29e330F1Fd15818",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "MarketAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "ThresholdUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "addMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x65350b76b4a87ffa288ae4e0ef5cc109ed2d825dccdbee1a9813dcd8feefe5c4",
  "receipt": {
    "to": null,
    "from": "0x1Ab4C6d9e25Fc65C917aFBEfB4E963C400Fb9814",
    "contractAddress": "0x3F8B30E5784Efc8c5ccC963eB29e330F1Fd15818",
    "transactionIndex": 0,
    "gasUsed": "840843",
    "logsBloom": "0x
    "blockHash": "0xd6c0f2515c19e9f1f009edc2b15f8cd118848379914f47aa8ee5c339fbe62130",
    "transactionHash": "0x65350b76b4a87ffa288ae4e0ef5cc109ed2d825dccdbee1a9813dcd8feefe5c4",
    "logs": [],
    "blockNumber": 124,
    "cumulativeGasUsed": "840843",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x923D2d6cc7f273329C39385Fd522d33fF535fb9b"
  ],
  "numDeployments": 1,
  "solcInputHash": "450ee6b18ddda29b8d2a1e54c806e257",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"MarketAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"ThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"addMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Registry.sol\":\"Registry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"contracts/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./SignatureLib.sol\\\";\\n\\ninterface IMarket {\\n\\tfunction getFee() external view returns (uint8);\\n\\n\\tfunction getTotalInPlay() external view returns (uint256);\\n\\n\\tfunction getInPlayCount() external view returns (uint256);\\n\\n\\tfunction getTotalExposure() external view returns (uint256);\\n\\n\\tfunction getBetByIndex(uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool,\\n\\t\\t\\taddress\\n\\t\\t);\\n\\n\\tfunction getOdds(\\n\\t\\tint256 wager,\\n\\t\\tint256 odds,\\n\\t\\tbytes32 propositionId\\n\\t) external view returns (int256);\\n\\n\\tfunction getOracleAddress() external view returns (address);\\n\\n\\tfunction getPotentialPayout(\\n\\t\\tbytes32 propositionId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) external view returns (uint256);\\n\\n\\tfunction getVaultAddress() external view returns (address);\\n\\n\\tfunction back(\\n\\t\\tbytes32 nonce,\\n\\t\\tbytes32 propositionId,\\n\\t\\tbytes32 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tuint256 close,\\n\\t\\tuint256 end,\\n\\t\\tSignatureLib.Signature calldata sig\\n\\t) external returns (uint256);\\n\\n\\tfunction settle(uint256 index) external;\\n\\n\\t// function settleMarket(\\n\\t//     uint256 from,\\n\\t//     uint256 to,\\n\\t//     bytes32 marketId\\n\\t// ) external;\\n}\\n\",\"keccak256\":\"0xdb2137ae9865457734e210822eb6b1c0068b9174024939f2f8f11d0a5d653130\",\"license\":\"MIT\"},\"contracts/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVault is IERC20Metadata {\\n    function asset() external view returns (IERC20Metadata assetTokenAddress);\\n\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256 shares);\\n\\n    function getPerformance() external view returns (uint256);\\n\\n    function setMarket(address market, uint256 max) external;\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function withdraw(uint256 shares) external;\\n\\n    event Deposit(address indexed who, uint256 value);\\n    event Withdraw(address indexed who, uint256 value);\\n}\\n\",\"keccak256\":\"0x1cd74f0ae830e9a465ddee1903ed7a0e63279c2de11a896b63490665463fa6c4\",\"license\":\"MIT\"},\"contracts/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./IMarket.sol\\\";\\nimport \\\"./IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract Registry {\\n    address[] public markets;\\n    IVault[] public vaults;\\n\\n    mapping(address => IVault) private _underlying;\\n    mapping(address => address) private _markets;\\n\\n    address private immutable _owner;\\n    IERC20Metadata private immutable _token;\\n    uint256 private _threshold;\\n\\n    function marketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n\\n    function vaultCount() external view returns (uint256) {\\n        return vaults.length;\\n    }\\n\\n    constructor(IERC20Metadata token) {\\n        _owner = msg.sender;\\n        _token = token;\\n    }\\n\\n    function addVault(IVault vault) external onlyTokenHolders {\\n        IERC20Metadata underlying = vault.asset();\\n        require(\\n            address(_underlying[address(underlying)]) == address(0),\\n            \\\"addVault: Vault with this underlying token already added\\\"\\n        );\\n\\n        vaults.push(vault);\\n        _underlying[address(underlying)] = vault; // underlying => vault\\n\\n        emit VaultAdded(address(vault));\\n    }\\n\\n    function addMarket(address market) external onlyTokenHolders {\\n        require(\\n            _markets[market] == address(0),\\n            \\\"addMarket: Market already added\\\"\\n        );\\n        _markets[market] = market;\\n        markets.push(market);\\n        emit MarketAdded(market);\\n    }\\n\\n    function setThreshold(uint256 threshold) external onlyOwner {\\n        _threshold = threshold;\\n        emit ThresholdUpdated(threshold);\\n    }\\n\\n    modifier onlyTokenHolders() {\\n        require(\\n            _token.balanceOf(msg.sender) >= _threshold,\\n            \\\"onlyTokenHolders: Caller does not hold enough tokens\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == _owner,\\n            \\\"onlyOwner: Caller is not the contract owner\\\"\\n        );\\n        _;\\n    }\\n\\n    event MarketAdded(address indexed market);\\n    event ThresholdUpdated(uint256 threshold);\\n    event VaultAdded(address indexed vault);\\n}\\n\",\"keccak256\":\"0xea765d51b5075df10d092c8b53bef4caf40b736622b911ee38887505435f80e0\",\"license\":\"MIT\"},\"contracts/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nlibrary SignatureLib {\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        bytes32 prefixedHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\n        );\\n        return ecrecover(prefixedHash, signature.v, signature.r, signature.s);\\n    }\\n}\\n\",\"keccak256\":\"0x030d6d33efc780f65e027c212235482f115a3f91f04195ebf5543c6b984ea3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000fb738038062000fb7833981810160405281019062000037919062000124565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505062000156565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000d882620000ab565b9050919050565b6000620000ec82620000cb565b9050919050565b620000fe81620000df565b81146200010a57600080fd5b50565b6000815190506200011e81620000f3565b92915050565b6000602082840312156200013d576200013c620000a6565b5b60006200014d848285016200010d565b91505092915050565b60805160a051610e34620001836000396000818161017701526104fd015260006107cd0152610e346000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063960bfe041161005b578063960bfe04146100ea578063a7c6a10014610106578063b1283e7714610124578063ec979082146101545761007d565b8063256b5a02146100825780638c64ea4a1461009e57806393e30633146100ce575b600080fd5b61009c60048036038101906100979190610967565b610172565b005b6100b860048036038101906100b391906109ca565b6104b9565b6040516100c59190610a56565b60405180910390f35b6100e860048036038101906100e39190610a9d565b6104f8565b005b61010460048036038101906100ff91906109ca565b6107cb565b005b61010e61089a565b60405161011b9190610ad9565b60405180910390f35b61013e600480360381019061013991906109ca565b6108a7565b60405161014b9190610b03565b60405180910390f35b61015c6108e6565b6040516101699190610ad9565b60405180910390f35b6004547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101ce9190610b03565b602060405180830381865afa1580156101eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020f9190610b33565b1015610250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024790610be3565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c19190610c41565b9050600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038890610ce0565b60405180910390fd5b6001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f7b7ef7a864d96a85497a1ed846adb39940dd6ccef678ff6ac8d55505e09b8cc460405160405180910390a25050565b600181815481106104c957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105549190610b03565b602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610b33565b10156105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90610be3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b90610d4c565b60405180910390fd5b80600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fbc600b1f03d316c479b49930c28e328809316458d5b5dacbb7419df5f6f8964760405160405180910390a250565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085090610dde565b60405180910390fd5b806004819055507fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe1718160405161088f9190610ad9565b60405180910390a150565b6000600180549050905090565b600081815481106108b757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008080549050905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610922826108f7565b9050919050565b600061093482610917565b9050919050565b61094481610929565b811461094f57600080fd5b50565b6000813590506109618161093b565b92915050565b60006020828403121561097d5761097c6108f2565b5b600061098b84828501610952565b91505092915050565b6000819050919050565b6109a781610994565b81146109b257600080fd5b50565b6000813590506109c48161099e565b92915050565b6000602082840312156109e0576109df6108f2565b5b60006109ee848285016109b5565b91505092915050565b6000819050919050565b6000610a1c610a17610a12846108f7565b6109f7565b6108f7565b9050919050565b6000610a2e82610a01565b9050919050565b6000610a4082610a23565b9050919050565b610a5081610a35565b82525050565b6000602082019050610a6b6000830184610a47565b92915050565b610a7a81610917565b8114610a8557600080fd5b50565b600081359050610a9781610a71565b92915050565b600060208284031215610ab357610ab26108f2565b5b6000610ac184828501610a88565b91505092915050565b610ad381610994565b82525050565b6000602082019050610aee6000830184610aca565b92915050565b610afd81610917565b82525050565b6000602082019050610b186000830184610af4565b92915050565b600081519050610b2d8161099e565b92915050565b600060208284031215610b4957610b486108f2565b5b6000610b5784828501610b1e565b91505092915050565b600082825260208201905092915050565b7f6f6e6c79546f6b656e486f6c646572733a2043616c6c657220646f6573206e6f60008201527f7420686f6c6420656e6f75676820746f6b656e73000000000000000000000000602082015250565b6000610bcd603483610b60565b9150610bd882610b71565b604082019050919050565b60006020820190508181036000830152610bfc81610bc0565b9050919050565b6000610c0e82610917565b9050919050565b610c1e81610c03565b8114610c2957600080fd5b50565b600081519050610c3b81610c15565b92915050565b600060208284031215610c5757610c566108f2565b5b6000610c6584828501610c2c565b91505092915050565b7f6164645661756c743a205661756c742077697468207468697320756e6465726c60008201527f79696e6720746f6b656e20616c72656164792061646465640000000000000000602082015250565b6000610cca603883610b60565b9150610cd582610c6e565b604082019050919050565b60006020820190508181036000830152610cf981610cbd565b9050919050565b7f6164644d61726b65743a204d61726b657420616c726561647920616464656400600082015250565b6000610d36601f83610b60565b9150610d4182610d00565b602082019050919050565b60006020820190508181036000830152610d6581610d29565b9050919050565b7f6f6e6c794f776e65723a2043616c6c6572206973206e6f742074686520636f6e60008201527f7472616374206f776e6572000000000000000000000000000000000000000000602082015250565b6000610dc8602b83610b60565b9150610dd382610d6c565b604082019050919050565b60006020820190508181036000830152610df781610dbb565b905091905056fea264697066735822122038f7f4e38b70b2b6ebb9b709665f134f06c68fd7d8e67ffedda8bdd60c8a1b5564736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063960bfe041161005b578063960bfe04146100ea578063a7c6a10014610106578063b1283e7714610124578063ec979082146101545761007d565b8063256b5a02146100825780638c64ea4a1461009e57806393e30633146100ce575b600080fd5b61009c60048036038101906100979190610967565b610172565b005b6100b860048036038101906100b391906109ca565b6104b9565b6040516100c59190610a56565b60405180910390f35b6100e860048036038101906100e39190610a9d565b6104f8565b005b61010460048036038101906100ff91906109ca565b6107cb565b005b61010e61089a565b60405161011b9190610ad9565b60405180910390f35b61013e600480360381019061013991906109ca565b6108a7565b60405161014b9190610b03565b60405180910390f35b61015c6108e6565b6040516101699190610ad9565b60405180910390f35b6004547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016101ce9190610b03565b602060405180830381865afa1580156101eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020f9190610b33565b1015610250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024790610be3565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c19190610c41565b9050600073ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610391576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038890610ce0565b60405180910390fd5b6001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff167f7b7ef7a864d96a85497a1ed846adb39940dd6ccef678ff6ac8d55505e09b8cc460405160405180910390a25050565b600181815481106104c957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6004547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105549190610b03565b602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610b33565b10156105d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105cd90610be3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b90610d4c565b60405180910390fd5b80600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167fbc600b1f03d316c479b49930c28e328809316458d5b5dacbb7419df5f6f8964760405160405180910390a250565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610859576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085090610dde565b60405180910390fd5b806004819055507fadfa8ecb21b6962ebcd0adbd9ab985b7b4c5b5eb3b0dead683171565c7bfe1718160405161088f9190610ad9565b60405180910390a150565b6000600180549050905090565b600081815481106108b757600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008080549050905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610922826108f7565b9050919050565b600061093482610917565b9050919050565b61094481610929565b811461094f57600080fd5b50565b6000813590506109618161093b565b92915050565b60006020828403121561097d5761097c6108f2565b5b600061098b84828501610952565b91505092915050565b6000819050919050565b6109a781610994565b81146109b257600080fd5b50565b6000813590506109c48161099e565b92915050565b6000602082840312156109e0576109df6108f2565b5b60006109ee848285016109b5565b91505092915050565b6000819050919050565b6000610a1c610a17610a12846108f7565b6109f7565b6108f7565b9050919050565b6000610a2e82610a01565b9050919050565b6000610a4082610a23565b9050919050565b610a5081610a35565b82525050565b6000602082019050610a6b6000830184610a47565b92915050565b610a7a81610917565b8114610a8557600080fd5b50565b600081359050610a9781610a71565b92915050565b600060208284031215610ab357610ab26108f2565b5b6000610ac184828501610a88565b91505092915050565b610ad381610994565b82525050565b6000602082019050610aee6000830184610aca565b92915050565b610afd81610917565b82525050565b6000602082019050610b186000830184610af4565b92915050565b600081519050610b2d8161099e565b92915050565b600060208284031215610b4957610b486108f2565b5b6000610b5784828501610b1e565b91505092915050565b600082825260208201905092915050565b7f6f6e6c79546f6b656e486f6c646572733a2043616c6c657220646f6573206e6f60008201527f7420686f6c6420656e6f75676820746f6b656e73000000000000000000000000602082015250565b6000610bcd603483610b60565b9150610bd882610b71565b604082019050919050565b60006020820190508181036000830152610bfc81610bc0565b9050919050565b6000610c0e82610917565b9050919050565b610c1e81610c03565b8114610c2957600080fd5b50565b600081519050610c3b81610c15565b92915050565b600060208284031215610c5757610c566108f2565b5b6000610c6584828501610c2c565b91505092915050565b7f6164645661756c743a205661756c742077697468207468697320756e6465726c60008201527f79696e6720746f6b656e20616c72656164792061646465640000000000000000602082015250565b6000610cca603883610b60565b9150610cd582610c6e565b604082019050919050565b60006020820190508181036000830152610cf981610cbd565b9050919050565b7f6164644d61726b65743a204d61726b657420616c726561647920616464656400600082015250565b6000610d36601f83610b60565b9150610d4182610d00565b602082019050919050565b60006020820190508181036000830152610d6581610d29565b9050919050565b7f6f6e6c794f776e65723a2043616c6c6572206973206e6f742074686520636f6e60008201527f7472616374206f776e6572000000000000000000000000000000000000000000602082015250565b6000610dc8602b83610b60565b9150610dd382610d6c565b604082019050919050565b60006020820190508181036000830152610df781610dbb565b905091905056fea264697066735822122038f7f4e38b70b2b6ebb9b709665f134f06c68fd7d8e67ffedda8bdd60c8a1b5564736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6219,
        "contract": "contracts/Registry.sol:Registry",
        "label": "markets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 6223,
        "contract": "contracts/Registry.sol:Registry",
        "label": "vaults",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(IVault)5231)dyn_storage"
      },
      {
        "astId": 6228,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_underlying",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_contract(IVault)5231)"
      },
      {
        "astId": 6232,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_markets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6239,
        "contract": "contracts/Registry.sol:Registry",
        "label": "_threshold",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IVault)5231)dyn_storage": {
        "base": "t_contract(IVault)5231",
        "encoding": "dynamic_array",
        "label": "contract IVault[]",
        "numberOfBytes": "32"
      },
      "t_contract(IVault)5231": {
        "encoding": "inplace",
        "label": "contract IVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_contract(IVault)5231)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract IVault)",
        "numberOfBytes": "32",
        "value": "t_contract(IVault)5231"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}