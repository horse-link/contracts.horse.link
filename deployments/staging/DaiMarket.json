{
  "address": "0x70b481B732822Af9beBc895779A6e261DC3D6C8B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IVault",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "fee",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "propositionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Placed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "Settled",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nonce",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "propositionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "marketId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "close",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureLib.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "back",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBetByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "id",
          "type": "uint64"
        }
      ],
      "name": "getExpiry",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInPlayCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "marketId",
          "type": "bytes32"
        }
      ],
      "name": "getMarketTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "wager",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "odds",
          "type": "int256"
        },
        {
          "internalType": "bytes32",
          "name": "propositionId",
          "type": "bytes32"
        }
      ],
      "name": "getOdds",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "propositionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "wager",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        }
      ],
      "name": "getPotentialPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalInPlay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "min",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "settle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3df9d62b16f702bc2f2d7b5144a005c16df504cc36c647c219499d6daff0859a",
  "receipt": {
    "to": null,
    "from": "0x1Ab4C6d9e25Fc65C917aFBEfB4E963C400Fb9814",
    "contractAddress": "0x70b481B732822Af9beBc895779A6e261DC3D6C8B",
    "transactionIndex": 0,
    "gasUsed": "2100434",
    "logsBloom": "0x
    "blockHash": "0x787153d7a2613325b1cb4b0a41b53ac54aeaf6bb3bb37d121ac39a80064a0540",
    "transactionHash": "0x3df9d62b16f702bc2f2d7b5144a005c16df504cc36c647c219499d6daff0859a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 135,
        "transactionHash": "0x3df9d62b16f702bc2f2d7b5144a005c16df504cc36c647c219499d6daff0859a",
        "address": "0x70b481B732822Af9beBc895779A6e261DC3D6C8B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001ab4c6d9e25fc65c917afbefb4e963c400fb9814"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x787153d7a2613325b1cb4b0a41b53ac54aeaf6bb3bb37d121ac39a80064a0540"
      }
    ],
    "blockNumber": 135,
    "cumulativeGasUsed": "2100434",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB678cF41Fec0DF2D4bF69cE0297311B993deE11b",
    0,
    "0x3e40EaBd1cf0fD4B27e9d4cA613Df9Cd278B5E4f"
  ],
  "numDeployments": 1,
  "solcInputHash": "450ee6b18ddda29b8d2a1e54c806e257",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IVault\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"fee\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"propositionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"marketId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Placed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"Settled\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nonce\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"propositionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"marketId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"close\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureLib.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"back\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBetByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"name\":\"getExpiry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInPlayCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"marketId\",\"type\":\"bytes32\"}],\"name\":\"getMarketTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"wager\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"odds\",\"type\":\"int256\"},{\"internalType\":\"bytes32\",\"name\":\"propositionId\",\"type\":\"bytes32\"}],\"name\":\"getOdds\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"propositionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wager\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"}],\"name\":\"getPotentialPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalInPlay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"min\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"settle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Market.sol\":\"Market\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/IBet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\ninterface IBet {\\n    function mint(address to) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x968c39009413f4a670e3d765a7419367bb03d27971086b162ad9bcf61082e874\",\"license\":\"MIT\"},\"contracts/IMarket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"./SignatureLib.sol\\\";\\n\\ninterface IMarket {\\n\\tfunction getFee() external view returns (uint8);\\n\\n\\tfunction getTotalInPlay() external view returns (uint256);\\n\\n\\tfunction getInPlayCount() external view returns (uint256);\\n\\n\\tfunction getTotalExposure() external view returns (uint256);\\n\\n\\tfunction getBetByIndex(uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool,\\n\\t\\t\\taddress\\n\\t\\t);\\n\\n\\tfunction getOdds(\\n\\t\\tint256 wager,\\n\\t\\tint256 odds,\\n\\t\\tbytes32 propositionId\\n\\t) external view returns (int256);\\n\\n\\tfunction getOracleAddress() external view returns (address);\\n\\n\\tfunction getPotentialPayout(\\n\\t\\tbytes32 propositionId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) external view returns (uint256);\\n\\n\\tfunction getVaultAddress() external view returns (address);\\n\\n\\tfunction back(\\n\\t\\tbytes32 nonce,\\n\\t\\tbytes32 propositionId,\\n\\t\\tbytes32 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tuint256 close,\\n\\t\\tuint256 end,\\n\\t\\tSignatureLib.Signature calldata sig\\n\\t) external returns (uint256);\\n\\n\\tfunction settle(uint256 index) external;\\n\\n\\t// function settleMarket(\\n\\t//     uint256 from,\\n\\t//     uint256 to,\\n\\t//     bytes32 marketId\\n\\t// ) external;\\n}\\n\",\"keccak256\":\"0xdb2137ae9865457734e210822eb6b1c0068b9174024939f2f8f11d0a5d653130\",\"license\":\"MIT\"},\"contracts/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\n// Binary Oracle\\ninterface IOracle {\\n    function checkResult(\\n        bytes32 marketId,\\n        bytes32 propositionId\\n    ) external view returns (bool);\\n\\n    function getResult(bytes32 marketId) external view returns (bytes32);\\n\\n    function setResult(\\n        bytes32 marketId,\\n        bytes32 propositionId,\\n        bytes32 sig\\n    ) external;\\n\\n    event ResultSet(bytes32 marketId, bytes32 propositionId);\\n}\\n\",\"keccak256\":\"0xa4ece937e3a354fb3e9f07dfcda71052fb78799c0f72710ac9945218efb246c3\",\"license\":\"MIT\"},\"contracts/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IVault is IERC20Metadata {\\n    function asset() external view returns (IERC20Metadata assetTokenAddress);\\n\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external returns (uint256 shares);\\n\\n    function getPerformance() external view returns (uint256);\\n\\n    function setMarket(address market, uint256 max) external;\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function withdraw(uint256 shares) external;\\n\\n    event Deposit(address indexed who, uint256 value);\\n    event Withdraw(address indexed who, uint256 value);\\n}\\n\",\"keccak256\":\"0x1cd74f0ae830e9a465ddee1903ed7a0e63279c2de11a896b63490665463fa6c4\",\"license\":\"MIT\"},\"contracts/Market.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IBet} from \\\"./IBet.sol\\\";\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IMarket.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./SignatureLib.sol\\\";\\n\\n// Put these in the ERC721 contract\\nstruct Bet {\\n\\tbytes32 propositionId;\\n\\tbytes32 marketId;\\n\\tuint256 amount;\\n\\tuint256 payout;\\n\\tuint256 payoutDate;\\n\\tbool settled;\\n\\taddress owner;\\n}\\n\\ncontract Market is Ownable, IMarket {\\n\\tuint256 private constant MAX = 32;\\n\\tint256 private constant PRECISION = 1_000;\\n\\tuint8 private immutable _fee;\\n\\tIVault private immutable _vault;\\n\\taddress private immutable _self;\\n\\tIOracle private immutable _oracle;\\n\\n\\tuint256 private _inplayCount; // running count of bets\\n\\tBet[] private _bets;\\n\\n\\t// MarketID => Bets Indexes\\n\\tmapping(bytes32 => uint256[]) private _marketBets;\\n\\n\\t// MarketID => amount bet\\n\\tmapping(bytes32 => uint256) private _marketTotal;\\n\\n\\t// MarketID => PropositionID => amount bet\\n\\tmapping(bytes32 => mapping(uint16 => uint256)) private _marketBetAmount;\\n\\n\\t// PropositionID => amount bet\\n\\tmapping(bytes32 => uint256) private _potentialPayout;\\n\\n\\tuint256 private _totalInPlay;\\n\\tuint256 private _totalExposure;\\n\\n\\t// Can claim after this period regardless\\n\\tuint256 public immutable timeout;\\n\\tuint256 public immutable min;\\n\\n\\tmapping(address => uint256) private _workerfees;\\n\\n\\tfunction getFee() external view returns (uint8) {\\n\\t\\treturn _fee;\\n\\t}\\n\\n\\tfunction getTotalInPlay() external view returns (uint256) {\\n\\t\\treturn _totalInPlay;\\n\\t}\\n\\n\\tfunction getInPlayCount() external view returns (uint256) {\\n\\t\\treturn _inplayCount;\\n\\t}\\n\\n\\tfunction getCount() external view returns (uint256) {\\n\\t\\treturn _bets.length;\\n\\t}\\n\\n\\tfunction getTotalExposure() external view returns (uint256) {\\n\\t\\treturn _totalExposure;\\n\\t}\\n\\n\\tfunction getOracleAddress() external view returns (address) {\\n\\t\\treturn address(_oracle);\\n\\t}\\n\\n\\tfunction getVaultAddress() external view returns (address) {\\n\\t\\treturn address(_vault);\\n\\t}\\n\\n\\tfunction getExpiry(uint64 id) external view returns (uint256) {\\n\\t\\treturn _getExpiry(id);\\n\\t}\\n\\n\\tfunction getMarketTotal(bytes32 marketId) external view returns (uint256) {\\n\\t\\treturn _marketTotal[marketId];\\n\\t}\\n\\n\\tfunction _getExpiry(uint64 id) private view returns (uint256) {\\n\\t\\treturn _bets[id].payoutDate + timeout;\\n\\t}\\n\\n\\tconstructor(\\n\\t\\tIVault vault,\\n\\t\\tuint8 fee,\\n\\t\\taddress oracle\\n\\t) {\\n\\t\\trequire(address(vault) != address(0), \\\"Invalid address\\\");\\n\\t\\t_self = address(this);\\n\\t\\t_vault = vault;\\n\\t\\t_fee = fee;\\n\\t\\t_oracle = IOracle(oracle);\\n\\n\\t\\ttimeout = 30 days;\\n\\t\\tmin = 1 hours;\\n\\t}\\n\\n\\tfunction getBetByIndex(uint256 index)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool,\\n\\t\\t\\taddress\\n\\t\\t)\\n\\t{\\n\\t\\treturn _getBet(index);\\n\\t}\\n\\n\\tfunction _getBet(uint256 index)\\n\\t\\tprivate\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tbool,\\n\\t\\t\\taddress\\n\\t\\t)\\n\\t{\\n\\t\\tBet memory bet = _bets[index];\\n\\t\\treturn (bet.amount, bet.payout, bet.payoutDate, bet.settled, bet.owner);\\n\\t}\\n\\n\\tfunction getOdds(\\n\\t\\tint256 wager,\\n\\t\\tint256 odds,\\n\\t\\tbytes32 propositionId\\n\\t) external view returns (int256) {\\n\\t\\tif (wager == 0 || odds == 0) return 0;\\n\\n\\t\\treturn _getOdds(wager, odds, propositionId);\\n\\t}\\n\\n\\tfunction _getOdds(\\n\\t\\tint256 wager,\\n\\t\\tint256 odds,\\n\\t\\tbytes32 propositionId\\n\\t) private view returns (int256) {\\n\\t\\tint256 p = int256(_vault.totalAssets()); //TODO: check that typecasting to a signed int is safe\\n\\n\\t\\tif (p == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// f(wager) = odds - odds*(wager/pool)\\n\\t\\tif (_potentialPayout[propositionId] > uint256(p)) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\t// do not include this guy in the return\\n\\t\\tp -= int256(_potentialPayout[propositionId]);\\n\\n\\t\\treturn odds - ((odds * ((wager * PRECISION) / p)) / PRECISION);\\n\\t}\\n\\n\\tfunction getPotentialPayout(\\n\\t\\tbytes32 propositionId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) external view returns (uint256) {\\n\\t\\treturn _getPayout(propositionId, wager, odds);\\n\\t}\\n\\n\\tfunction _getPayout(\\n\\t\\tbytes32 propositionId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds\\n\\t) private view returns (uint256) {\\n\\t\\tassert(odds > 0);\\n\\t\\tassert(wager > 0);\\n\\n\\t\\t// add underlying to the market\\n\\t\\tint256 trueOdds = _getOdds(int256(wager), int256(odds), propositionId);\\n\\t\\tif (trueOdds == 0) {\\n\\t\\t\\treturn 0;\\n\\t\\t}\\n\\n\\t\\treturn (uint256(trueOdds) * wager) / 1_000_000;\\n\\t}\\n\\n\\tfunction back(\\n\\t\\tbytes32 nonce,\\n\\t\\tbytes32 propositionId,\\n\\t\\tbytes32 marketId,\\n\\t\\tuint256 wager,\\n\\t\\tuint256 odds,\\n\\t\\tuint256 close,\\n\\t\\tuint256 end,\\n\\t\\tSignatureLib.Signature calldata signature\\n\\t) external returns (uint256) {\\n\\t\\trequire(\\n\\t\\t\\tend > block.timestamp && block.timestamp > close,\\n\\t\\t\\t\\\"back: Invalid date\\\"\\n\\t\\t);\\n\\n\\t\\t// check the oracle first\\n\\t\\trequire(\\n\\t\\t\\tIOracle(_oracle).checkResult(marketId, propositionId) == false,\\n\\t\\t\\t\\\"back: Oracle result already set for this market\\\"\\n\\t\\t);\\n\\n\\t\\tIERC20Metadata underlying = _vault.asset();\\n\\n\\t\\t// add underlying to the market\\n\\t\\tuint256 payout = _getPayout(propositionId, wager, odds);\\n\\n\\t\\t// escrow\\n\\t\\tunderlying.transferFrom(msg.sender, _self, wager);\\n\\t\\tunderlying.transferFrom(address(_vault), _self, (payout - wager));\\n\\n\\t\\t// add to the market\\n\\t\\t_marketTotal[marketId] += wager;\\n\\n\\t\\t_bets.push(\\n\\t\\t\\tBet(propositionId, marketId, wager, payout, end, false, msg.sender)\\n\\t\\t);\\n\\t\\tuint256 count = _bets.length;\\n\\t\\tuint256 index = count - 1;\\n\\t\\t_marketBets[marketId].push(count);\\n\\n\\t\\t_totalInPlay += wager;\\n\\t\\t_totalExposure += (payout - wager);\\n\\t\\t_inplayCount++;\\n\\n\\t\\temit Placed(index, propositionId, marketId, wager, payout, msg.sender);\\n\\n\\t\\treturn count; // token ID\\n\\t}\\n\\n\\tfunction settle(uint256 index) external {\\n\\t\\tBet memory bet = _bets[index];\\n\\t\\trequire(bet.settled == false, \\\"settle: Bet has already settled\\\");\\n\\t\\tbool result = IOracle(_oracle).checkResult(\\n\\t\\t\\tbet.marketId,\\n\\t\\t\\tbet.propositionId\\n\\t\\t);\\n\\t\\t_settle(index, result);\\n\\t}\\n\\n\\t// function settleMarket(\\n\\t//     uint256 from,\\n\\t//     uint256 to,\\n\\t//     bytes32 marketId\\n\\t// ) external {\\n\\t//     for (uint256 i = from; i < to; i++) {\\n\\t//         uint256 index = _marketBets[marketId][i];\\n\\n\\t//         if (!_bets[index].settled) {\\n\\t//             bytes32 propositionId = IOracle(_oracle).getResult(\\n\\t//                 _bets[index].marketId\\n\\t//             );\\n\\n\\t//             if (_bets[index].propositionId == propositionId) {\\n\\t//                 _settle(index, true);\\n\\t//             } else {\\n\\t//                 _settle(index, false);\\n\\t//             }\\n\\t//         }\\n\\t//     }\\n\\t// }\\n\\n\\tfunction _settle(uint256 id, bool result) private {\\n\\t\\trequire(\\n\\t\\t\\t_bets[id].payoutDate < block.timestamp,\\n\\t\\t\\t\\\"_settle: Payout date not reached\\\"\\n\\t\\t);\\n\\n\\t\\t_bets[id].settled = true;\\n\\t\\t_totalInPlay -= _bets[id].amount;\\n\\t\\t_totalExposure -= _bets[id].payout - _bets[id].amount;\\n\\t\\t_inplayCount--;\\n\\n\\t\\tIERC20Metadata underlying = _vault.asset();\\n\\n\\t\\tif (result == true) {\\n\\t\\t\\t// Transfer the win to the punter\\n\\t\\t\\tunderlying.transfer(_bets[id].owner, _bets[id].payout);\\n\\t\\t}\\n\\n\\t\\tif (result == false) {\\n\\t\\t\\t// Transfer the proceeds to the vault, less market fee\\n\\t\\t\\tunderlying.transfer(address(_vault), _bets[id].payout);\\n\\t\\t}\\n\\n\\t\\temit Settled(id, _bets[id].payout, result, _bets[id].owner);\\n\\t}\\n\\n\\tmodifier onlyMarketOwner(\\n\\t\\tbytes32 messageHash,\\n\\t\\tSignatureLib.Signature calldata signature\\n\\t) {\\n\\t\\t//bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\\n\\t\\trequire(\\n\\t\\t\\tSignatureLib.recoverSigner(messageHash, signature) == owner(),\\n\\t\\t\\t\\\"onlyMarketOwner: Invalid signature\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n\\n\\tevent Placed(\\n\\t\\tuint256 index,\\n\\t\\tbytes32 propositionId,\\n\\t\\tbytes32 marketId,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 payout,\\n\\t\\taddress indexed owner\\n\\t);\\n\\n\\tevent Settled(\\n\\t\\tuint256 id,\\n\\t\\tuint256 payout,\\n\\t\\tbool result,\\n\\t\\taddress indexed owner\\n\\t);\\n}\\n\",\"keccak256\":\"0xd573fb808bb2cf16bc0b7f569e4ab4a30279bb4fb743af63f3b54e85aab80e34\",\"license\":\"MIT\"},\"contracts/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.10;\\n\\nlibrary SignatureLib {\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        bytes32 prefixedHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\n        );\\n        return ecrecover(prefixedHash, signature.v, signature.r, signature.s);\\n    }\\n}\\n\",\"keccak256\":\"0x030d6d33efc780f65e027c212235482f115a3f91f04195ebf5543c6b984ea3cd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620029333803806200293383398181016040528101906200003891906200034e565b620000586200004c6200019560201b60201c565b6200019d60201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415620000cb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000c2906200040b565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508160ff1660808160ff16815250508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff168152505062278d006101008181525050610e1061012081815250505050506200042d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002938262000266565b9050919050565b6000620002a78262000286565b9050919050565b620002b9816200029a565b8114620002c557600080fd5b50565b600081519050620002d981620002ae565b92915050565b600060ff82169050919050565b620002f781620002df565b81146200030357600080fd5b50565b6000815190506200031781620002ec565b92915050565b620003288162000286565b81146200033457600080fd5b50565b60008151905062000348816200031d565b92915050565b6000806000606084860312156200036a576200036962000261565b5b60006200037a86828701620002c8565b93505060206200038d8682870162000306565b9250506040620003a08682870162000337565b9150509250925092565b600082825260208201905092915050565b7f496e76616c696420616464726573730000000000000000000000000000000000600082015250565b6000620003f3600f83620003aa565b91506200040082620003bb565b602082019050919050565b600060208201905081810360008301526200042681620003e4565b9050919050565b60805160a05160c05160e0516101005161012051612477620004bc6000396000610d4301526000818161042d01526114a30152600081816105b90152818161067d015261073e0152600081816108db015261099c0152600081816104070152818161081e0152818161097b0152818161111c015281816112cd0152611508015260006106c501526124776000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c8063a87d942c116100ad578063d21f48e111610071578063d21f48e1146102ee578063e4650fac1461031e578063e8ee7b9b1461034e578063f2fde38b1461037e578063f88979451461039a57610121565b8063a87d942c14610246578063b18b78dd14610264578063bf61178814610282578063c96121a8146102b2578063ced72f87146102d057610121565b806370dea79a116100f457806370dea79a146101c6578063715018a6146101e45780638ac6d217146101ee5780638da5cb5b1461020c5780638df828001461022a57610121565b8063064c770214610126578063129c45fc14610156578063584394791461018a57806365cacaa4146101a8575b600080fd5b610140600480360381019061013b919061167a565b6103b8565b60405161014d91906116c0565b60405180910390f35b610170600480360381019061016b9190611707565b6103d5565b604051610181959493929190611790565b60405180910390f35b6101926103f9565b60405161019f91906116c0565b60405180910390f35b6101b0610403565b6040516101bd91906117e3565b60405180910390f35b6101ce61042b565b6040516101db91906116c0565b60405180910390f35b6101ec61044f565b005b6101f6610463565b60405161020391906116c0565b60405180910390f35b61021461046d565b60405161022191906117e3565b60405180910390f35b610244600480360381019061023f9190611707565b610496565b005b61024e61066c565b60405161025b91906116c0565b60405180910390f35b61026c610679565b60405161027991906117e3565b60405180910390f35b61029c600480360381019061029791906117fe565b6106a1565b6040516102a991906116c0565b60405180910390f35b6102ba6106b7565b6040516102c791906116c0565b60405180910390f35b6102d86106c1565b6040516102e5919061186d565b60405180910390f35b610308600480360381019061030391906118ac565b6106e9565b60405161031591906116c0565b60405180910390f35b610338600480360381019061033391906119a2565b610c78565b60405161034591906116c0565b60405180910390f35b61036860048036038101906103639190611a05565b610c8a565b6040516103759190611a67565b60405180910390f35b61039860048036038101906103939190611aae565b610cbd565b005b6103a2610d41565b6040516103af91906116c0565b60405180910390f35b600060046000838152602001908152602001600020549050919050565b60008060008060006103e686610d65565b9450945094509450945091939590929450565b6000600754905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b610457610e6d565b6104616000610eeb565b565b6000600854905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600282815481106104ac576104ab611adb565b5b90600052602060002090600602016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600015158160a001511515146105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90611b67565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a9df35c836020015184600001516040518363ffffffff1660e01b815260040161061a929190611b96565b602060405180830381865afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190611beb565b90506106678382610faf565b505050565b6000600280549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006106ae848484611435565b90509392505050565b6000600154905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600042831180156106f957508342115b610738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072f90611c64565b60405180910390fd5b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a9df35c898b6040518363ffffffff1660e01b8152600401610797929190611b96565b602060405180830381865afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d89190611beb565b15151461081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190611cf6565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190611d54565b905060006108ba8a8989611435565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd337f00000000000000000000000000000000000000000000000000000000000000008b6040518463ffffffff1660e01b815260040161091993929190611d81565b6020604051808303816000875af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611beb565b508173ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008b856109c79190611de7565b6040518463ffffffff1660e01b81526004016109e593929190611d81565b6020604051808303816000875af1158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190611beb565b5087600460008b81526020019081526020016000206000828254610a4c9190611e1b565b9250508190555060026040518060e001604052808c81526020018b81526020018a81526020018381526020018781526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000209060060201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050600060028054905090506000600182610b7e9190611de7565b9050600360008c81526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558960076000828254610bcc9190611e1b565b925050819055508983610bdf9190611de7565b60086000828254610bf09190611e1b565b9250508190555060016000815480929190610c0a90611e71565b91905055503373ffffffffffffffffffffffffffffffffffffffff167fd759bd709dd545e334bbbe1ec5f65be8969a61bba4499466675d5cfe7a36b5fe828e8e8e88604051610c5d959493929190611eba565b60405180910390a28194505050505098975050505050505050565b6000610c838261149f565b9050919050565b600080841480610c9a5750600083145b15610ca85760009050610cb6565b610cb3848484611503565b90505b9392505050565b610cc5610e6d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c90611f7f565b60405180910390fd5b610d3e81610eeb565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008060008060028781548110610d8257610d81611adb565b5b90600052602060002090600602016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060400151816060015182608001518360a001518460c00151955095509550955095505091939590929450565b610e75611637565b73ffffffffffffffffffffffffffffffffffffffff16610e9361046d565b73ffffffffffffffffffffffffffffffffffffffff1614610ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee090611feb565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b4260028381548110610fc457610fc3611adb565b5b90600052602060002090600602016004015410611016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100d90612057565b60405180910390fd5b60016002838154811061102c5761102b611adb565b5b906000526020600020906006020160050160006101000a81548160ff0219169083151502179055506002828154811061106857611067611adb565b5b9060005260206000209060060201600201546007600082825461108b9190611de7565b92505081905550600282815481106110a6576110a5611adb565b5b906000526020600020906006020160020154600283815481106110cc576110cb611adb565b5b9060005260206000209060060201600301546110e89190611de7565b600860008282546110f99190611de7565b925050819055506001600081548092919061111390612077565b919050555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a99190611d54565b90506001151582151514156112a2578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600285815481106111e8576111e7611adb565b5b906000526020600020906006020160050160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002868154811061122e5761122d611adb565b5b9060005260206000209060060201600301546040518363ffffffff1660e01b815260040161125d9291906120a1565b6020604051808303816000875af115801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190611beb565b505b600015158215151415611374578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7f000000000000000000000000000000000000000000000000000000000000000060028681548110611300576112ff611adb565b5b9060005260206000209060060201600301546040518363ffffffff1660e01b815260040161132f9291906120a1565b6020604051808303816000875af115801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190611beb565b505b6002838154811061138857611387611adb565b5b906000526020600020906006020160050160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f08a2a3d90b4a86017a5adf7503073c6b2b44051c48e9844a336190c9793c4af9846002868154811061140657611405611adb565b5b90600052602060002090600602016003015485604051611428939291906120ca565b60405180910390a2505050565b600080821161144757611446612101565b5b6000831161145857611457612101565b5b6000611465848487611503565b9050600081141561147a576000915050611498565b620f4240848261148a9190612130565b61149491906121b9565b9150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000060028367ffffffffffffffff16815481106114e0576114df611adb565b5b9060005260206000209060060201600401546114fc9190611e1b565b9050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159591906121ff565b905060008114156115aa576000915050611630565b80600660008581526020019081526020016000205411156115cf576000915050611630565b6006600084815260200190815260200160002054816115ee919061222c565b90506103e8816103e88761160291906122c0565b61160c91906123d7565b8561161791906122c0565b61162191906123d7565b8461162c919061222c565b9150505b9392505050565b600033905090565b600080fd5b6000819050919050565b61165781611644565b811461166257600080fd5b50565b6000813590506116748161164e565b92915050565b6000602082840312156116905761168f61163f565b5b600061169e84828501611665565b91505092915050565b6000819050919050565b6116ba816116a7565b82525050565b60006020820190506116d560008301846116b1565b92915050565b6116e4816116a7565b81146116ef57600080fd5b50565b600081359050611701816116db565b92915050565b60006020828403121561171d5761171c61163f565b5b600061172b848285016116f2565b91505092915050565b60008115159050919050565b61174981611734565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061177a8261174f565b9050919050565b61178a8161176f565b82525050565b600060a0820190506117a560008301886116b1565b6117b260208301876116b1565b6117bf60408301866116b1565b6117cc6060830185611740565b6117d96080830184611781565b9695505050505050565b60006020820190506117f86000830184611781565b92915050565b6000806000606084860312156118175761181661163f565b5b600061182586828701611665565b9350506020611836868287016116f2565b9250506040611847868287016116f2565b9150509250925092565b600060ff82169050919050565b61186781611851565b82525050565b6000602082019050611882600083018461185e565b92915050565b600080fd5b6000606082840312156118a3576118a2611888565b5b81905092915050565b600080600080600080600080610140898b0312156118cd576118cc61163f565b5b60006118db8b828c01611665565b98505060206118ec8b828c01611665565b97505060406118fd8b828c01611665565b965050606061190e8b828c016116f2565b955050608061191f8b828c016116f2565b94505060a06119308b828c016116f2565b93505060c06119418b828c016116f2565b92505060e06119528b828c0161188d565b9150509295985092959890939650565b600067ffffffffffffffff82169050919050565b61197f81611962565b811461198a57600080fd5b50565b60008135905061199c81611976565b92915050565b6000602082840312156119b8576119b761163f565b5b60006119c68482850161198d565b91505092915050565b6000819050919050565b6119e2816119cf565b81146119ed57600080fd5b50565b6000813590506119ff816119d9565b92915050565b600080600060608486031215611a1e57611a1d61163f565b5b6000611a2c868287016119f0565b9350506020611a3d868287016119f0565b9250506040611a4e86828701611665565b9150509250925092565b611a61816119cf565b82525050565b6000602082019050611a7c6000830184611a58565b92915050565b611a8b8161176f565b8114611a9657600080fd5b50565b600081359050611aa881611a82565b92915050565b600060208284031215611ac457611ac361163f565b5b6000611ad284828501611a99565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f736574746c653a204265742068617320616c726561647920736574746c656400600082015250565b6000611b51601f83611b0a565b9150611b5c82611b1b565b602082019050919050565b60006020820190508181036000830152611b8081611b44565b9050919050565b611b9081611644565b82525050565b6000604082019050611bab6000830185611b87565b611bb86020830184611b87565b9392505050565b611bc881611734565b8114611bd357600080fd5b50565b600081519050611be581611bbf565b92915050565b600060208284031215611c0157611c0061163f565b5b6000611c0f84828501611bd6565b91505092915050565b7f6261636b3a20496e76616c696420646174650000000000000000000000000000600082015250565b6000611c4e601283611b0a565b9150611c5982611c18565b602082019050919050565b60006020820190508181036000830152611c7d81611c41565b9050919050565b7f6261636b3a204f7261636c6520726573756c7420616c7265616479207365742060008201527f666f722074686973206d61726b65740000000000000000000000000000000000602082015250565b6000611ce0602f83611b0a565b9150611ceb82611c84565b604082019050919050565b60006020820190508181036000830152611d0f81611cd3565b9050919050565b6000611d218261176f565b9050919050565b611d3181611d16565b8114611d3c57600080fd5b50565b600081519050611d4e81611d28565b92915050565b600060208284031215611d6a57611d6961163f565b5b6000611d7884828501611d3f565b91505092915050565b6000606082019050611d966000830186611781565b611da36020830185611781565b611db060408301846116b1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611df2826116a7565b9150611dfd836116a7565b925082821015611e1057611e0f611db8565b5b828203905092915050565b6000611e26826116a7565b9150611e31836116a7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e6657611e65611db8565b5b828201905092915050565b6000611e7c826116a7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611eaf57611eae611db8565b5b600182019050919050565b600060a082019050611ecf60008301886116b1565b611edc6020830187611b87565b611ee96040830186611b87565b611ef660608301856116b1565b611f0360808301846116b1565b9695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611f69602683611b0a565b9150611f7482611f0d565b604082019050919050565b60006020820190508181036000830152611f9881611f5c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611fd5602083611b0a565b9150611fe082611f9f565b602082019050919050565b6000602082019050818103600083015261200481611fc8565b9050919050565b7f5f736574746c653a205061796f75742064617465206e6f742072656163686564600082015250565b6000612041602083611b0a565b915061204c8261200b565b602082019050919050565b6000602082019050818103600083015261207081612034565b9050919050565b6000612082826116a7565b9150600082141561209657612095611db8565b5b600182039050919050565b60006040820190506120b66000830185611781565b6120c360208301846116b1565b9392505050565b60006060820190506120df60008301866116b1565b6120ec60208301856116b1565b6120f96040830184611740565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600061213b826116a7565b9150612146836116a7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561217f5761217e611db8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121c4826116a7565b91506121cf836116a7565b9250826121df576121de61218a565b5b828204905092915050565b6000815190506121f9816116db565b92915050565b6000602082840312156122155761221461163f565b5b6000612223848285016121ea565b91505092915050565b6000612237826119cf565b9150612242836119cf565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561227d5761227c611db8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156122b5576122b4611db8565b5b828203905092915050565b60006122cb826119cf565b91506122d6836119cf565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561231557612314611db8565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561235257612351611db8565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561238f5761238e611db8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123cc576123cb611db8565b5b828202905092915050565b60006123e2826119cf565b91506123ed836119cf565b9250826123fd576123fc61218a565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561243657612435611db8565b5b82820590509291505056fea264697066735822122082a0f5951f0285b7d280ac376b338b2fcde8b24828a7979ea2657d27e8e0a5bc64736f6c634300080a0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c8063a87d942c116100ad578063d21f48e111610071578063d21f48e1146102ee578063e4650fac1461031e578063e8ee7b9b1461034e578063f2fde38b1461037e578063f88979451461039a57610121565b8063a87d942c14610246578063b18b78dd14610264578063bf61178814610282578063c96121a8146102b2578063ced72f87146102d057610121565b806370dea79a116100f457806370dea79a146101c6578063715018a6146101e45780638ac6d217146101ee5780638da5cb5b1461020c5780638df828001461022a57610121565b8063064c770214610126578063129c45fc14610156578063584394791461018a57806365cacaa4146101a8575b600080fd5b610140600480360381019061013b919061167a565b6103b8565b60405161014d91906116c0565b60405180910390f35b610170600480360381019061016b9190611707565b6103d5565b604051610181959493929190611790565b60405180910390f35b6101926103f9565b60405161019f91906116c0565b60405180910390f35b6101b0610403565b6040516101bd91906117e3565b60405180910390f35b6101ce61042b565b6040516101db91906116c0565b60405180910390f35b6101ec61044f565b005b6101f6610463565b60405161020391906116c0565b60405180910390f35b61021461046d565b60405161022191906117e3565b60405180910390f35b610244600480360381019061023f9190611707565b610496565b005b61024e61066c565b60405161025b91906116c0565b60405180910390f35b61026c610679565b60405161027991906117e3565b60405180910390f35b61029c600480360381019061029791906117fe565b6106a1565b6040516102a991906116c0565b60405180910390f35b6102ba6106b7565b6040516102c791906116c0565b60405180910390f35b6102d86106c1565b6040516102e5919061186d565b60405180910390f35b610308600480360381019061030391906118ac565b6106e9565b60405161031591906116c0565b60405180910390f35b610338600480360381019061033391906119a2565b610c78565b60405161034591906116c0565b60405180910390f35b61036860048036038101906103639190611a05565b610c8a565b6040516103759190611a67565b60405180910390f35b61039860048036038101906103939190611aae565b610cbd565b005b6103a2610d41565b6040516103af91906116c0565b60405180910390f35b600060046000838152602001908152602001600020549050919050565b60008060008060006103e686610d65565b9450945094509450945091939590929450565b6000600754905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b610457610e6d565b6104616000610eeb565b565b6000600854905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600282815481106104ac576104ab611adb565b5b90600052602060002090600602016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600015158160a001511515146105b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ac90611b67565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a9df35c836020015184600001516040518363ffffffff1660e01b815260040161061a929190611b96565b602060405180830381865afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190611beb565b90506106678382610faf565b505050565b6000600280549050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006106ae848484611435565b90509392505050565b6000600154905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600042831180156106f957508342115b610738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072f90611c64565b60405180910390fd5b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638a9df35c898b6040518363ffffffff1660e01b8152600401610797929190611b96565b602060405180830381865afa1580156107b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d89190611beb565b15151461081a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081190611cf6565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610887573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ab9190611d54565b905060006108ba8a8989611435565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd337f00000000000000000000000000000000000000000000000000000000000000008b6040518463ffffffff1660e01b815260040161091993929190611d81565b6020604051808303816000875af1158015610938573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095c9190611beb565b508173ffffffffffffffffffffffffffffffffffffffff166323b872dd7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000008b856109c79190611de7565b6040518463ffffffff1660e01b81526004016109e593929190611d81565b6020604051808303816000875af1158015610a04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a289190611beb565b5087600460008b81526020019081526020016000206000828254610a4c9190611e1b565b9250508190555060026040518060e001604052808c81526020018b81526020018a81526020018381526020018781526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff168152509080600181540180825580915050600190039060005260206000209060060201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050600060028054905090506000600182610b7e9190611de7565b9050600360008c81526020019081526020016000208290806001815401808255809150506001900390600052602060002001600090919091909150558960076000828254610bcc9190611e1b565b925050819055508983610bdf9190611de7565b60086000828254610bf09190611e1b565b9250508190555060016000815480929190610c0a90611e71565b91905055503373ffffffffffffffffffffffffffffffffffffffff167fd759bd709dd545e334bbbe1ec5f65be8969a61bba4499466675d5cfe7a36b5fe828e8e8e88604051610c5d959493929190611eba565b60405180910390a28194505050505098975050505050505050565b6000610c838261149f565b9050919050565b600080841480610c9a5750600083145b15610ca85760009050610cb6565b610cb3848484611503565b90505b9392505050565b610cc5610e6d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c90611f7f565b60405180910390fd5b610d3e81610eeb565b50565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060008060008060028781548110610d8257610d81611adb565b5b90600052602060002090600602016040518060e001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152505090508060400151816060015182608001518360a001518460c00151955095509550955095505091939590929450565b610e75611637565b73ffffffffffffffffffffffffffffffffffffffff16610e9361046d565b73ffffffffffffffffffffffffffffffffffffffff1614610ee9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee090611feb565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b4260028381548110610fc457610fc3611adb565b5b90600052602060002090600602016004015410611016576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100d90612057565b60405180910390fd5b60016002838154811061102c5761102b611adb565b5b906000526020600020906006020160050160006101000a81548160ff0219169083151502179055506002828154811061106857611067611adb565b5b9060005260206000209060060201600201546007600082825461108b9190611de7565b92505081905550600282815481106110a6576110a5611adb565b5b906000526020600020906006020160020154600283815481106110cc576110cb611adb565b5b9060005260206000209060060201600301546110e89190611de7565b600860008282546110f99190611de7565b925050819055506001600081548092919061111390612077565b919050555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611185573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a99190611d54565b90506001151582151514156112a2578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600285815481106111e8576111e7611adb565b5b906000526020600020906006020160050160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002868154811061122e5761122d611adb565b5b9060005260206000209060060201600301546040518363ffffffff1660e01b815260040161125d9291906120a1565b6020604051808303816000875af115801561127c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a09190611beb565b505b600015158215151415611374578073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb7f000000000000000000000000000000000000000000000000000000000000000060028681548110611300576112ff611adb565b5b9060005260206000209060060201600301546040518363ffffffff1660e01b815260040161132f9291906120a1565b6020604051808303816000875af115801561134e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113729190611beb565b505b6002838154811061138857611387611adb565b5b906000526020600020906006020160050160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f08a2a3d90b4a86017a5adf7503073c6b2b44051c48e9844a336190c9793c4af9846002868154811061140657611405611adb565b5b90600052602060002090600602016003015485604051611428939291906120ca565b60405180910390a2505050565b600080821161144757611446612101565b5b6000831161145857611457612101565b5b6000611465848487611503565b9050600081141561147a576000915050611498565b620f4240848261148a9190612130565b61149491906121b9565b9150505b9392505050565b60007f000000000000000000000000000000000000000000000000000000000000000060028367ffffffffffffffff16815481106114e0576114df611adb565b5b9060005260206000209060060201600401546114fc9190611e1b565b9050919050565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa158015611571573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061159591906121ff565b905060008114156115aa576000915050611630565b80600660008581526020019081526020016000205411156115cf576000915050611630565b6006600084815260200190815260200160002054816115ee919061222c565b90506103e8816103e88761160291906122c0565b61160c91906123d7565b8561161791906122c0565b61162191906123d7565b8461162c919061222c565b9150505b9392505050565b600033905090565b600080fd5b6000819050919050565b61165781611644565b811461166257600080fd5b50565b6000813590506116748161164e565b92915050565b6000602082840312156116905761168f61163f565b5b600061169e84828501611665565b91505092915050565b6000819050919050565b6116ba816116a7565b82525050565b60006020820190506116d560008301846116b1565b92915050565b6116e4816116a7565b81146116ef57600080fd5b50565b600081359050611701816116db565b92915050565b60006020828403121561171d5761171c61163f565b5b600061172b848285016116f2565b91505092915050565b60008115159050919050565b61174981611734565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061177a8261174f565b9050919050565b61178a8161176f565b82525050565b600060a0820190506117a560008301886116b1565b6117b260208301876116b1565b6117bf60408301866116b1565b6117cc6060830185611740565b6117d96080830184611781565b9695505050505050565b60006020820190506117f86000830184611781565b92915050565b6000806000606084860312156118175761181661163f565b5b600061182586828701611665565b9350506020611836868287016116f2565b9250506040611847868287016116f2565b9150509250925092565b600060ff82169050919050565b61186781611851565b82525050565b6000602082019050611882600083018461185e565b92915050565b600080fd5b6000606082840312156118a3576118a2611888565b5b81905092915050565b600080600080600080600080610140898b0312156118cd576118cc61163f565b5b60006118db8b828c01611665565b98505060206118ec8b828c01611665565b97505060406118fd8b828c01611665565b965050606061190e8b828c016116f2565b955050608061191f8b828c016116f2565b94505060a06119308b828c016116f2565b93505060c06119418b828c016116f2565b92505060e06119528b828c0161188d565b9150509295985092959890939650565b600067ffffffffffffffff82169050919050565b61197f81611962565b811461198a57600080fd5b50565b60008135905061199c81611976565b92915050565b6000602082840312156119b8576119b761163f565b5b60006119c68482850161198d565b91505092915050565b6000819050919050565b6119e2816119cf565b81146119ed57600080fd5b50565b6000813590506119ff816119d9565b92915050565b600080600060608486031215611a1e57611a1d61163f565b5b6000611a2c868287016119f0565b9350506020611a3d868287016119f0565b9250506040611a4e86828701611665565b9150509250925092565b611a61816119cf565b82525050565b6000602082019050611a7c6000830184611a58565b92915050565b611a8b8161176f565b8114611a9657600080fd5b50565b600081359050611aa881611a82565b92915050565b600060208284031215611ac457611ac361163f565b5b6000611ad284828501611a99565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f736574746c653a204265742068617320616c726561647920736574746c656400600082015250565b6000611b51601f83611b0a565b9150611b5c82611b1b565b602082019050919050565b60006020820190508181036000830152611b8081611b44565b9050919050565b611b9081611644565b82525050565b6000604082019050611bab6000830185611b87565b611bb86020830184611b87565b9392505050565b611bc881611734565b8114611bd357600080fd5b50565b600081519050611be581611bbf565b92915050565b600060208284031215611c0157611c0061163f565b5b6000611c0f84828501611bd6565b91505092915050565b7f6261636b3a20496e76616c696420646174650000000000000000000000000000600082015250565b6000611c4e601283611b0a565b9150611c5982611c18565b602082019050919050565b60006020820190508181036000830152611c7d81611c41565b9050919050565b7f6261636b3a204f7261636c6520726573756c7420616c7265616479207365742060008201527f666f722074686973206d61726b65740000000000000000000000000000000000602082015250565b6000611ce0602f83611b0a565b9150611ceb82611c84565b604082019050919050565b60006020820190508181036000830152611d0f81611cd3565b9050919050565b6000611d218261176f565b9050919050565b611d3181611d16565b8114611d3c57600080fd5b50565b600081519050611d4e81611d28565b92915050565b600060208284031215611d6a57611d6961163f565b5b6000611d7884828501611d3f565b91505092915050565b6000606082019050611d966000830186611781565b611da36020830185611781565b611db060408301846116b1565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611df2826116a7565b9150611dfd836116a7565b925082821015611e1057611e0f611db8565b5b828203905092915050565b6000611e26826116a7565b9150611e31836116a7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e6657611e65611db8565b5b828201905092915050565b6000611e7c826116a7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611eaf57611eae611db8565b5b600182019050919050565b600060a082019050611ecf60008301886116b1565b611edc6020830187611b87565b611ee96040830186611b87565b611ef660608301856116b1565b611f0360808301846116b1565b9695505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611f69602683611b0a565b9150611f7482611f0d565b604082019050919050565b60006020820190508181036000830152611f9881611f5c565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611fd5602083611b0a565b9150611fe082611f9f565b602082019050919050565b6000602082019050818103600083015261200481611fc8565b9050919050565b7f5f736574746c653a205061796f75742064617465206e6f742072656163686564600082015250565b6000612041602083611b0a565b915061204c8261200b565b602082019050919050565b6000602082019050818103600083015261207081612034565b9050919050565b6000612082826116a7565b9150600082141561209657612095611db8565b5b600182039050919050565b60006040820190506120b66000830185611781565b6120c360208301846116b1565b9392505050565b60006060820190506120df60008301866116b1565b6120ec60208301856116b1565b6120f96040830184611740565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600061213b826116a7565b9150612146836116a7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561217f5761217e611db8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121c4826116a7565b91506121cf836116a7565b9250826121df576121de61218a565b5b828204905092915050565b6000815190506121f9816116db565b92915050565b6000602082840312156122155761221461163f565b5b6000612223848285016121ea565b91505092915050565b6000612237826119cf565b9150612242836119cf565b9250827f80000000000000000000000000000000000000000000000000000000000000000182126000841215161561227d5761227c611db8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0182136000841216156122b5576122b4611db8565b5b828203905092915050565b60006122cb826119cf565b91506122d6836119cf565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561231557612314611db8565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561235257612351611db8565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561238f5761238e611db8565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156123cc576123cb611db8565b5b828202905092915050565b60006123e2826119cf565b91506123ed836119cf565b9250826123fd576123fc61218a565b5b600160000383147f80000000000000000000000000000000000000000000000000000000000000008314161561243657612435611db8565b5b82820590509291505056fea264697066735822122082a0f5951f0285b7d280ac376b338b2fcde8b24828a7979ea2657d27e8e0a5bc64736f6c634300080a0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2726,
        "contract": "contracts/Market.sol:Market",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5278,
        "contract": "contracts/Market.sol:Market",
        "label": "_inplayCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5282,
        "contract": "contracts/Market.sol:Market",
        "label": "_bets",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_struct(Bet)5256_storage)dyn_storage"
      },
      {
        "astId": 5287,
        "contract": "contracts/Market.sol:Market",
        "label": "_marketBets",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5291,
        "contract": "contracts/Market.sol:Market",
        "label": "_marketTotal",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5297,
        "contract": "contracts/Market.sol:Market",
        "label": "_marketBetAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint16,t_uint256))"
      },
      {
        "astId": 5301,
        "contract": "contracts/Market.sol:Market",
        "label": "_potentialPayout",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 5303,
        "contract": "contracts/Market.sol:Market",
        "label": "_totalInPlay",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5305,
        "contract": "contracts/Market.sol:Market",
        "label": "_totalExposure",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 5313,
        "contract": "contracts/Market.sol:Market",
        "label": "_workerfees",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Bet)5256_storage)dyn_storage": {
        "base": "t_struct(Bet)5256_storage",
        "encoding": "dynamic_array",
        "label": "struct Bet[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint16,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint16 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bet)5256_storage": {
        "encoding": "inplace",
        "label": "struct Bet",
        "members": [
          {
            "astId": 5243,
            "contract": "contracts/Market.sol:Market",
            "label": "propositionId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 5245,
            "contract": "contracts/Market.sol:Market",
            "label": "marketId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 5247,
            "contract": "contracts/Market.sol:Market",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5249,
            "contract": "contracts/Market.sol:Market",
            "label": "payout",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5251,
            "contract": "contracts/Market.sol:Market",
            "label": "payoutDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5253,
            "contract": "contracts/Market.sol:Market",
            "label": "settled",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 5255,
            "contract": "contracts/Market.sol:Market",
            "label": "owner",
            "offset": 1,
            "slot": "5",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}