{
  "address": "0xA32b09d8673B999475c21208393F215a27Ee9e74",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        }
      ],
      "name": "ResultSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "indexed": true,
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        }
      ],
      "name": "ScratchedSet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LOSER",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SCRATCHED",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WINNER",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "propositionId",
          "type": "bytes16"
        }
      ],
      "name": "checkResult",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        }
      ],
      "name": "getResult",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes16",
              "name": "winningPropositionId",
              "type": "bytes16"
            },
            {
              "components": [
                {
                  "internalType": "bytes16",
                  "name": "scratchedPropositionId",
                  "type": "bytes16"
                },
                {
                  "internalType": "uint256",
                  "name": "timestamp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "odds",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "totalOdds",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IOracle.Scratched[]",
              "name": "scratched",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IOracle.Result",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "winningPropositionId",
          "type": "bytes16"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureLib.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "setResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16",
          "name": "marketId",
          "type": "bytes16"
        },
        {
          "internalType": "bytes16",
          "name": "scratchedPropositionId",
          "type": "bytes16"
        },
        {
          "internalType": "uint256",
          "name": "odds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalOdds",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct SignatureLib.Signature",
          "name": "signature",
          "type": "tuple"
        }
      ],
      "name": "setScratchedResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2f71881b71ef32c4fcb1476c9b036924fcf32c75e695dadc32a0da6a4c3509d",
  "receipt": {
    "to": null,
    "from": "0x1Ab4C6d9e25Fc65C917aFBEfB4E963C400Fb9814",
    "contractAddress": "0xA32b09d8673B999475c21208393F215a27Ee9e74",
    "transactionIndex": 19,
    "gasUsed": "690194",
    "logsBloom": "0x
    "blockHash": "0x9698a8873a1453dd6e820b5a0bf0de7fb6dce7ba85885a9306cb97b52089e4b0",
    "transactionHash": "0xe2f71881b71ef32c4fcb1476c9b036924fcf32c75e695dadc32a0da6a4c3509d",
    "logs": [],
    "blockNumber": 8651282,
    "cumulativeGasUsed": "2336080",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "d201b94d8abebfdb04409b15b930c950",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"}],\"name\":\"ResultSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"indexed\":true,\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"}],\"name\":\"ScratchedSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LOSER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCRATCHED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WINNER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"propositionId\",\"type\":\"bytes16\"}],\"name\":\"checkResult\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"}],\"name\":\"getResult\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"winningPropositionId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"bytes16\",\"name\":\"scratchedPropositionId\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOdds\",\"type\":\"uint256\"}],\"internalType\":\"struct IOracle.Scratched[]\",\"name\":\"scratched\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IOracle.Result\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"winningPropositionId\",\"type\":\"bytes16\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureLib.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16\",\"name\":\"marketId\",\"type\":\"bytes16\"},{\"internalType\":\"bytes16\",\"name\":\"scratchedPropositionId\",\"type\":\"bytes16\"},{\"internalType\":\"uint256\",\"name\":\"odds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalOdds\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct SignatureLib.Signature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setScratchedResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarketOracle.sol\":\"MarketOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"./SignatureLib.sol\\\";\\n\\n// Oracle\\ninterface IOracle {\\n    struct Scratched {\\n        bytes16 scratchedPropositionId;\\n        // Timestamp of when the result was scratched\\n        uint256 timestamp;\\n        // Odds of the scratched proposition at time of scratching\\n        uint256 odds;\\n        // Total odds of all runners at time of scratching\\n        uint256 totalOdds;\\n    }\\n\\n    struct Result {\\n        bytes16 winningPropositionId;\\n        Scratched [] scratched;\\n\\t}\\n\\n    function checkResult(\\n        bytes16 marketId,\\n        bytes16 propositionId\\n    ) external view returns (uint8);\\n\\n    function getResult(bytes16 marketId) external view returns (Result memory);\\n\\n    function setResult(\\n        bytes16 marketId,\\n        bytes16 propositionId,\\n        SignatureLib.Signature calldata signature\\n    ) external;\\n\\n\\tfunction setScratchedResult(\\n\\t\\tbytes16 marketId,\\n\\t\\tbytes16 scratchedPropositionId,\\n        uint256 odds,\\n        uint256 totalOdds,\\n\\t\\tSignatureLib.Signature calldata signature\\n\\t) external;\\n\\n    event ResultSet(bytes16 indexed marketId, bytes16 indexed propositionId);\\n    event ScratchedSet(bytes16 indexed marketId, bytes16 indexed propositionId);\\n}\",\"keccak256\":\"0xae29c49c0f664cbad42637bb07ea33989263c7b91767f36d83785b75e62968d2\",\"license\":\"MIT\"},\"contracts/MarketOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./SignatureLib.sol\\\";\\n\\ncontract MarketOracle is IOracle {\\n\\n\\t// Mapping of marketId => winning propositionId\\n\\tmapping(bytes16 => Result) private _results;\\n\\taddress private immutable _owner;\\n\\n\\t// Race result constants\\n    uint8 public constant WINNER = 0x01;\\n    uint8 public constant LOSER = 0x02;\\n    uint8 public constant SCRATCHED = 0x03;\\n\\n\\tconstructor() {\\n\\t\\t_owner = msg.sender;\\n\\t}\\n\\n\\tfunction getOwner() external view returns (address) {\\n\\t\\treturn _owner;\\n\\t}\\n\\n\\t// Change to return one of the constants\\n\\tfunction checkResult(\\n\\t\\tbytes16 marketId,\\n\\t\\tbytes16 propositionId\\n\\t) external view returns (uint8) {\\n\\t\\trequire(\\n\\t\\t\\tpropositionId != bytes16(0),\\n\\t\\t\\t\\\"checkResult: Invalid propositionId\\\"\\n\\t\\t);\\n\\n\\t\\tif (_results[marketId].winningPropositionId == propositionId) {\\n\\t\\t\\treturn WINNER;\\n\\t\\t}\\n\\t\\tuint256 totalScratched = _results[marketId].scratched.length;\\n\\t\\tfor (uint256 i = 0; i < totalScratched ; i++) {\\n\\t\\t\\tif (_results[marketId].scratched[i].scratchedPropositionId == propositionId) {\\n\\t\\t\\t\\treturn SCRATCHED;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn LOSER;\\n\\t}\\n\\n\\tfunction getResult(bytes16 marketId) external view returns (Result memory) {\\n\\t\\trequire(\\n\\t\\t\\tmarketId != bytes16(0),\\n\\t\\t\\t\\\"getResult: Invalid propositionId\\\"\\n\\t\\t);\\n\\t\\treturn _results[marketId];\\n\\t}\\n\\n\\tfunction setResult(\\n\\t\\tbytes16 marketId,\\n\\t\\tbytes16 winningPropositionId,\\n\\t\\tSignatureLib.Signature calldata signature\\n\\t) external {\\n\\t\\tbytes32 messageHash = keccak256(abi.encodePacked(marketId, winningPropositionId));\\n\\t\\trequire(\\n\\t\\t\\tisValidSignature(messageHash, signature),\\n\\t\\t\\t\\\"setResult: Invalid signature\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\twinningPropositionId != bytes16(0),\\n\\t\\t\\t\\\"setResult: Invalid propositionId\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t_results[marketId].winningPropositionId == bytes16(0),\\n\\t\\t\\t\\\"setResult: Result already set\\\"\\n\\t\\t);\\n\\t\\t_results[marketId].winningPropositionId = winningPropositionId;\\n\\n\\t\\temit ResultSet(marketId, winningPropositionId);\\n\\t}\\n\\n\\tfunction setScratchedResult(\\n\\t\\tbytes16 marketId,\\n\\t\\tbytes16 scratchedPropositionId,\\n\\t\\tuint256 odds,\\n        uint256 totalOdds,\\n\\t\\tSignatureLib.Signature calldata signature\\n\\t) external {\\n\\t\\tbytes32 messageHash = keccak256(abi.encodePacked(marketId, scratchedPropositionId, odds, totalOdds));\\n\\t\\trequire(\\n\\t\\t\\tisValidSignature(messageHash, signature),\\n\\t\\t\\t\\\"setScratchedResult: Invalid signature\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tscratchedPropositionId != bytes16(0),\\n\\t\\t\\t\\\"setScratchedResult: Invalid propositionId\\\"\\n\\t\\t);\\n\\n\\t\\tuint256 totalScratched = _results[marketId].scratched.length;\\n\\t\\tfor (uint256 i = 0; i < totalScratched ; i++) {\\n\\t\\t\\tif (_results[marketId].scratched[i].scratchedPropositionId == scratchedPropositionId) {\\n\\t\\t\\t\\trevert(\\\"setScratchedResult: Result already set\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\t_results[marketId].scratched.push(\\n\\t\\t\\tScratched(\\n\\t\\t\\t\\tscratchedPropositionId,\\n\\t\\t\\t\\tblock.timestamp,\\n\\t\\t\\t\\todds,\\n\\t\\t\\t\\ttotalOdds\\n\\t\\t));\\n\\n\\t\\temit ScratchedSet(marketId, scratchedPropositionId);\\n\\t}\\n\\n\\tfunction isValidSignature(\\n\\t\\tbytes32 messageHash,\\n\\t\\tSignatureLib.Signature calldata signature\\n\\t) private view returns (bool) {\\n\\t\\taddress signer = SignatureLib.recoverSigner(messageHash, signature);\\n\\t\\tassert(signer != address(0));\\n\\t\\treturn address(signer) == address(_owner);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0e38f3e34709db5dbf8bcbea4e0d00e1b2c096c59a45d185103fe4805a71ee3c\",\"license\":\"MIT\"},\"contracts/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.15;\\n\\nlibrary SignatureLib {\\n    struct Signature {\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 message,\\n        Signature memory signature\\n    ) public pure returns (address) {\\n        bytes32 prefixedHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", message)\\n        );\\n        return ecrecover(prefixedHash, signature.v, signature.r, signature.s);\\n    }\\n}\\n\",\"keccak256\":\"0x3d2aea16b52e98b22e10addc4401c67151de809a94688cc5fa7c0e5529b65ccb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5033608052608051610b876100366000396000818160e401526108a80152610b876000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b108501f1161005b578063b108501f14610123578063bc985bc91461012b578063c85f93fb14610133578063d1e90d621461014657600080fd5b806306c77ce71461008d5780634b51e70a146100b7578063893d20e8146100d75780639a56d9191461010e575b600080fd5b6100a061009b366004610901565b61014e565b60405160ff90911681526020015b60405180910390f35b6100ca6100c5366004610934565b610292565b6040516100ae9190610956565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100ae565b61012161011c3660046109fd565b6103bd565b005b6100a0600181565b6100a0600381565b610121610141366004610a41565b610564565b6100a0600281565b60006001600160801b031982166101b75760405162461bcd60e51b815260206004820152602260248201527f636865636b526573756c743a20496e76616c69642070726f706f736974696f6e604482015261125960f21b60648201526084015b60405180910390fd5b6001600160801b031983811660009081526020819052604090205481841660809190911b909116036101eb5750600161028c565b6001600160801b03198316600090815260208190526040812060010154905b81811015610285576001600160801b031985811660009081526020819052604090206001018054918616918390811061024557610245610a99565b600091825260209091206004909102015460801b6001600160801b031916036102735760039250505061028c565b8061027d81610aaf565b91505061020a565b5060029150505b92915050565b6040805180820190915260008152606060208201526001600160801b031982166102fe5760405162461bcd60e51b815260206004820181905260248201527f676574526573756c743a20496e76616c69642070726f706f736974696f6e496460448201526064016101ae565b6001600160801b031980831660009081526020818152604080832081518083018352815460801b909516855260018101805483518186028101860190945280845291948685019491929184015b828210156103af576000848152602090819020604080516080808201835260048702909301805490931b6001600160801b0319168152600180840154828601526002840154928201929092526003909201546060830152908352909201910161034b565b505050915250909392505050565b604080516001600160801b0319808616602083015284166030820152600091016040516020818303038152906040528051906020012090506103ff8183610811565b61044b5760405162461bcd60e51b815260206004820152601c60248201527f736574526573756c743a20496e76616c6964207369676e61747572650000000060448201526064016101ae565b6001600160801b031983166104a25760405162461bcd60e51b815260206004820181905260248201527f736574526573756c743a20496e76616c69642070726f706f736974696f6e496460448201526064016101ae565b6001600160801b031984811660009081526020819052604090205460801b161561050e5760405162461bcd60e51b815260206004820152601d60248201527f736574526573756c743a20526573756c7420616c72656164792073657400000060448201526064016101ae565b6001600160801b031984811660008181526020819052604080822080548516608089901c17905551928616927f1a26e02557415617cb31ed9c9ac1bbe2c8f5e32b8f13ddc706d9ad0afb3c2b449190a350505050565b604080516001600160801b0319808816602083015286166030820152908101849052606081018390526000906080016040516020818303038152906040528051906020012090506105b58183610811565b61060f5760405162461bcd60e51b815260206004820152602560248201527f736574536372617463686564526573756c743a20496e76616c6964207369676e604482015264617475726560d81b60648201526084016101ae565b6001600160801b031985166106785760405162461bcd60e51b815260206004820152602960248201527f736574536372617463686564526573756c743a20496e76616c69642070726f706044820152681bdcda5d1a5bdb925960ba1b60648201526084016101ae565b6001600160801b03198616600090815260208190526040812060010154905b8181101561075e576001600160801b03198881166000908152602081905260409020600101805491891691839081106106d2576106d2610a99565b600091825260209091206004909102015460801b6001600160801b0319160361074c5760405162461bcd60e51b815260206004820152602660248201527f736574536372617463686564526573756c743a20526573756c7420616c726561604482015265191e481cd95d60d21b60648201526084016101ae565b8061075681610aaf565b915050610697565b506001600160801b03198781166000818152602081815260408083208151608080820184528d8816808352428387019081528386018f8152606085018f8152600196870180548089018255908b52988a20955160049099029095018054909b169790931c969096178955945192880192909255905160028701555160039095019490945592517f7ebfaa5cc08727235b615a1e2ac630f84eea185e0687caccec932c2134922e129190a350505050505050565b60008073da270572f48a366bBDa85b095303c85eb88B1503635cff288d85856040518363ffffffff1660e01b815260040161084d929190610ad6565b602060405180830381865af415801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190610b12565b90506001600160a01b0381166108a6576108a6610b3b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161491505092915050565b80356001600160801b0319811681146108fc57600080fd5b919050565b6000806040838503121561091457600080fd5b61091d836108e4565b915061092b602084016108e4565b90509250929050565b60006020828403121561094657600080fd5b61094f826108e4565b9392505050565b6000602080835260608084016fffffffffffffffffffffffffffffffff198087511684870152838701516040808189015283825180865260809550858a019150878401935060005b818110156109d5578451805187168452898101518a850152848101518585015288015188840152938801939186019160010161099e565b50909a9950505050505050505050565b6000606082840312156109f757600080fd5b50919050565b600080600060a08486031215610a1257600080fd5b610a1b846108e4565b9250610a29602085016108e4565b9150610a3885604086016109e5565b90509250925092565b600080600080600060e08688031215610a5957600080fd5b610a62866108e4565b9450610a70602087016108e4565b93506040860135925060608601359150610a8d87608088016109e5565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600060018201610acf57634e487b7160e01b600052601160045260246000fd5b5060010190565b82815260808101823560ff8116808214610aef57600080fd5b806020850152505060208301356040830152604083013560608301529392505050565b600060208284031215610b2457600080fd5b81516001600160a01b038116811461094f57600080fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220635eee76aaf6bb0fe9cdb88b9c4d9ef100e66f54a87e9b4efda3b00eb6381ff064736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063b108501f1161005b578063b108501f14610123578063bc985bc91461012b578063c85f93fb14610133578063d1e90d621461014657600080fd5b806306c77ce71461008d5780634b51e70a146100b7578063893d20e8146100d75780639a56d9191461010e575b600080fd5b6100a061009b366004610901565b61014e565b60405160ff90911681526020015b60405180910390f35b6100ca6100c5366004610934565b610292565b6040516100ae9190610956565b6040516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001681526020016100ae565b61012161011c3660046109fd565b6103bd565b005b6100a0600181565b6100a0600381565b610121610141366004610a41565b610564565b6100a0600281565b60006001600160801b031982166101b75760405162461bcd60e51b815260206004820152602260248201527f636865636b526573756c743a20496e76616c69642070726f706f736974696f6e604482015261125960f21b60648201526084015b60405180910390fd5b6001600160801b031983811660009081526020819052604090205481841660809190911b909116036101eb5750600161028c565b6001600160801b03198316600090815260208190526040812060010154905b81811015610285576001600160801b031985811660009081526020819052604090206001018054918616918390811061024557610245610a99565b600091825260209091206004909102015460801b6001600160801b031916036102735760039250505061028c565b8061027d81610aaf565b91505061020a565b5060029150505b92915050565b6040805180820190915260008152606060208201526001600160801b031982166102fe5760405162461bcd60e51b815260206004820181905260248201527f676574526573756c743a20496e76616c69642070726f706f736974696f6e496460448201526064016101ae565b6001600160801b031980831660009081526020818152604080832081518083018352815460801b909516855260018101805483518186028101860190945280845291948685019491929184015b828210156103af576000848152602090819020604080516080808201835260048702909301805490931b6001600160801b0319168152600180840154828601526002840154928201929092526003909201546060830152908352909201910161034b565b505050915250909392505050565b604080516001600160801b0319808616602083015284166030820152600091016040516020818303038152906040528051906020012090506103ff8183610811565b61044b5760405162461bcd60e51b815260206004820152601c60248201527f736574526573756c743a20496e76616c6964207369676e61747572650000000060448201526064016101ae565b6001600160801b031983166104a25760405162461bcd60e51b815260206004820181905260248201527f736574526573756c743a20496e76616c69642070726f706f736974696f6e496460448201526064016101ae565b6001600160801b031984811660009081526020819052604090205460801b161561050e5760405162461bcd60e51b815260206004820152601d60248201527f736574526573756c743a20526573756c7420616c72656164792073657400000060448201526064016101ae565b6001600160801b031984811660008181526020819052604080822080548516608089901c17905551928616927f1a26e02557415617cb31ed9c9ac1bbe2c8f5e32b8f13ddc706d9ad0afb3c2b449190a350505050565b604080516001600160801b0319808816602083015286166030820152908101849052606081018390526000906080016040516020818303038152906040528051906020012090506105b58183610811565b61060f5760405162461bcd60e51b815260206004820152602560248201527f736574536372617463686564526573756c743a20496e76616c6964207369676e604482015264617475726560d81b60648201526084016101ae565b6001600160801b031985166106785760405162461bcd60e51b815260206004820152602960248201527f736574536372617463686564526573756c743a20496e76616c69642070726f706044820152681bdcda5d1a5bdb925960ba1b60648201526084016101ae565b6001600160801b03198616600090815260208190526040812060010154905b8181101561075e576001600160801b03198881166000908152602081905260409020600101805491891691839081106106d2576106d2610a99565b600091825260209091206004909102015460801b6001600160801b0319160361074c5760405162461bcd60e51b815260206004820152602660248201527f736574536372617463686564526573756c743a20526573756c7420616c726561604482015265191e481cd95d60d21b60648201526084016101ae565b8061075681610aaf565b915050610697565b506001600160801b03198781166000818152602081815260408083208151608080820184528d8816808352428387019081528386018f8152606085018f8152600196870180548089018255908b52988a20955160049099029095018054909b169790931c969096178955945192880192909255905160028701555160039095019490945592517f7ebfaa5cc08727235b615a1e2ac630f84eea185e0687caccec932c2134922e129190a350505050505050565b60008073__$47464c6f7588c8075b5d384b19d082a8ec$__635cff288d85856040518363ffffffff1660e01b815260040161084d929190610ad6565b602060405180830381865af415801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190610b12565b90506001600160a01b0381166108a6576108a6610b3b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03161491505092915050565b80356001600160801b0319811681146108fc57600080fd5b919050565b6000806040838503121561091457600080fd5b61091d836108e4565b915061092b602084016108e4565b90509250929050565b60006020828403121561094657600080fd5b61094f826108e4565b9392505050565b6000602080835260608084016fffffffffffffffffffffffffffffffff198087511684870152838701516040808189015283825180865260809550858a019150878401935060005b818110156109d5578451805187168452898101518a850152848101518585015288015188840152938801939186019160010161099e565b50909a9950505050505050505050565b6000606082840312156109f757600080fd5b50919050565b600080600060a08486031215610a1257600080fd5b610a1b846108e4565b9250610a29602085016108e4565b9150610a3885604086016109e5565b90509250925092565b600080600080600060e08688031215610a5957600080fd5b610a62866108e4565b9450610a70602087016108e4565b93506040860135925060608601359150610a8d87608088016109e5565b90509295509295909350565b634e487b7160e01b600052603260045260246000fd5b600060018201610acf57634e487b7160e01b600052601160045260246000fd5b5060010190565b82815260808101823560ff8116808214610aef57600080fd5b806020850152505060208301356040830152604083013560608301529392505050565b600060208284031215610b2457600080fd5b81516001600160a01b038116811461094f57600080fd5b634e487b7160e01b600052600160045260246000fdfea2646970667358221220635eee76aaf6bb0fe9cdb88b9c4d9ef100e66f54a87e9b4efda3b00eb6381ff064736f6c634300080f0033",
  "libraries": {
    "SignatureLib": "0xda270572f48a366bBDa85b095303c85eb88B1503"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10173,
        "contract": "contracts/MarketOracle.sol:MarketOracle",
        "label": "_results",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes16,t_struct(Result)8351_storage)"
      }
    ],
    "types": {
      "t_array(t_struct(Scratched)8344_storage)dyn_storage": {
        "base": "t_struct(Scratched)8344_storage",
        "encoding": "dynamic_array",
        "label": "struct IOracle.Scratched[]",
        "numberOfBytes": "32"
      },
      "t_bytes16": {
        "encoding": "inplace",
        "label": "bytes16",
        "numberOfBytes": "16"
      },
      "t_mapping(t_bytes16,t_struct(Result)8351_storage)": {
        "encoding": "mapping",
        "key": "t_bytes16",
        "label": "mapping(bytes16 => struct IOracle.Result)",
        "numberOfBytes": "32",
        "value": "t_struct(Result)8351_storage"
      },
      "t_struct(Result)8351_storage": {
        "encoding": "inplace",
        "label": "struct IOracle.Result",
        "members": [
          {
            "astId": 8346,
            "contract": "contracts/MarketOracle.sol:MarketOracle",
            "label": "winningPropositionId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes16"
          },
          {
            "astId": 8350,
            "contract": "contracts/MarketOracle.sol:MarketOracle",
            "label": "scratched",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Scratched)8344_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Scratched)8344_storage": {
        "encoding": "inplace",
        "label": "struct IOracle.Scratched",
        "members": [
          {
            "astId": 8337,
            "contract": "contracts/MarketOracle.sol:MarketOracle",
            "label": "scratchedPropositionId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes16"
          },
          {
            "astId": 8339,
            "contract": "contracts/MarketOracle.sol:MarketOracle",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8341,
            "contract": "contracts/MarketOracle.sol:MarketOracle",
            "label": "odds",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8343,
            "contract": "contracts/MarketOracle.sol:MarketOracle",
            "label": "totalOdds",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}